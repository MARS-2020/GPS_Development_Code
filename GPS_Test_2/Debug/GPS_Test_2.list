
GPS_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001bf8  08001bf8  00011bf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001c34  08001c34  00011c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001c3c  08001c3c  00011c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001c40  08001c40  00011c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08001c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001b0  2000007c  08001cc0  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000022c  08001cc0  0002022c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000087c9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ab0  00000000  00000000  0002886d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003579  00000000  00000000  0002a31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000650  00000000  00000000  0002d898  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000778  00000000  00000000  0002dee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003914  00000000  00000000  0002e660  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000027b5  00000000  00000000  00031f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034729  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000010bc  00000000  00000000  000347a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001be0 	.word	0x08001be0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08001be0 	.word	0x08001be0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uldivmod>:
 8000248:	2b00      	cmp	r3, #0
 800024a:	d111      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 800024c:	2a00      	cmp	r2, #0
 800024e:	d10f      	bne.n	8000270 <__aeabi_uldivmod+0x28>
 8000250:	2900      	cmp	r1, #0
 8000252:	d100      	bne.n	8000256 <__aeabi_uldivmod+0xe>
 8000254:	2800      	cmp	r0, #0
 8000256:	d002      	beq.n	800025e <__aeabi_uldivmod+0x16>
 8000258:	2100      	movs	r1, #0
 800025a:	43c9      	mvns	r1, r1
 800025c:	1c08      	adds	r0, r1, #0
 800025e:	b407      	push	{r0, r1, r2}
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <__aeabi_uldivmod+0x24>)
 8000262:	a102      	add	r1, pc, #8	; (adr r1, 800026c <__aeabi_uldivmod+0x24>)
 8000264:	1840      	adds	r0, r0, r1
 8000266:	9002      	str	r0, [sp, #8]
 8000268:	bd03      	pop	{r0, r1, pc}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	ffffffd9 	.word	0xffffffd9
 8000270:	b403      	push	{r0, r1}
 8000272:	4668      	mov	r0, sp
 8000274:	b501      	push	{r0, lr}
 8000276:	9802      	ldr	r0, [sp, #8]
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	9b01      	ldr	r3, [sp, #4]
 800027e:	469e      	mov	lr, r3
 8000280:	b002      	add	sp, #8
 8000282:	bc0c      	pop	{r2, r3}
 8000284:	4770      	bx	lr
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__udivmoddi4>:
 8000288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800028a:	4657      	mov	r7, sl
 800028c:	464e      	mov	r6, r9
 800028e:	4645      	mov	r5, r8
 8000290:	46de      	mov	lr, fp
 8000292:	b5e0      	push	{r5, r6, r7, lr}
 8000294:	0004      	movs	r4, r0
 8000296:	b083      	sub	sp, #12
 8000298:	000d      	movs	r5, r1
 800029a:	4692      	mov	sl, r2
 800029c:	4699      	mov	r9, r3
 800029e:	428b      	cmp	r3, r1
 80002a0:	d82f      	bhi.n	8000302 <__udivmoddi4+0x7a>
 80002a2:	d02c      	beq.n	80002fe <__udivmoddi4+0x76>
 80002a4:	4649      	mov	r1, r9
 80002a6:	4650      	mov	r0, sl
 80002a8:	f000 f8ae 	bl	8000408 <__clzdi2>
 80002ac:	0029      	movs	r1, r5
 80002ae:	0006      	movs	r6, r0
 80002b0:	0020      	movs	r0, r4
 80002b2:	f000 f8a9 	bl	8000408 <__clzdi2>
 80002b6:	1a33      	subs	r3, r6, r0
 80002b8:	4698      	mov	r8, r3
 80002ba:	3b20      	subs	r3, #32
 80002bc:	469b      	mov	fp, r3
 80002be:	d500      	bpl.n	80002c2 <__udivmoddi4+0x3a>
 80002c0:	e074      	b.n	80003ac <__udivmoddi4+0x124>
 80002c2:	4653      	mov	r3, sl
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	001f      	movs	r7, r3
 80002ca:	4653      	mov	r3, sl
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	001e      	movs	r6, r3
 80002d2:	42af      	cmp	r7, r5
 80002d4:	d829      	bhi.n	800032a <__udivmoddi4+0xa2>
 80002d6:	d026      	beq.n	8000326 <__udivmoddi4+0x9e>
 80002d8:	465b      	mov	r3, fp
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	41bd      	sbcs	r5, r7
 80002de:	2b00      	cmp	r3, #0
 80002e0:	da00      	bge.n	80002e4 <__udivmoddi4+0x5c>
 80002e2:	e079      	b.n	80003d8 <__udivmoddi4+0x150>
 80002e4:	2200      	movs	r2, #0
 80002e6:	2300      	movs	r3, #0
 80002e8:	9200      	str	r2, [sp, #0]
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	2301      	movs	r3, #1
 80002ee:	465a      	mov	r2, fp
 80002f0:	4093      	lsls	r3, r2
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	2301      	movs	r3, #1
 80002f6:	4642      	mov	r2, r8
 80002f8:	4093      	lsls	r3, r2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	e019      	b.n	8000332 <__udivmoddi4+0xaa>
 80002fe:	4282      	cmp	r2, r0
 8000300:	d9d0      	bls.n	80002a4 <__udivmoddi4+0x1c>
 8000302:	2200      	movs	r2, #0
 8000304:	2300      	movs	r3, #0
 8000306:	9200      	str	r2, [sp, #0]
 8000308:	9301      	str	r3, [sp, #4]
 800030a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <__udivmoddi4+0x8c>
 8000310:	601c      	str	r4, [r3, #0]
 8000312:	605d      	str	r5, [r3, #4]
 8000314:	9800      	ldr	r0, [sp, #0]
 8000316:	9901      	ldr	r1, [sp, #4]
 8000318:	b003      	add	sp, #12
 800031a:	bc3c      	pop	{r2, r3, r4, r5}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	46a2      	mov	sl, r4
 8000322:	46ab      	mov	fp, r5
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	42a3      	cmp	r3, r4
 8000328:	d9d6      	bls.n	80002d8 <__udivmoddi4+0x50>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	4643      	mov	r3, r8
 8000334:	2b00      	cmp	r3, #0
 8000336:	d0e8      	beq.n	800030a <__udivmoddi4+0x82>
 8000338:	07fb      	lsls	r3, r7, #31
 800033a:	0872      	lsrs	r2, r6, #1
 800033c:	431a      	orrs	r2, r3
 800033e:	4646      	mov	r6, r8
 8000340:	087b      	lsrs	r3, r7, #1
 8000342:	e00e      	b.n	8000362 <__udivmoddi4+0xda>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d101      	bne.n	800034c <__udivmoddi4+0xc4>
 8000348:	42a2      	cmp	r2, r4
 800034a:	d80c      	bhi.n	8000366 <__udivmoddi4+0xde>
 800034c:	1aa4      	subs	r4, r4, r2
 800034e:	419d      	sbcs	r5, r3
 8000350:	2001      	movs	r0, #1
 8000352:	1924      	adds	r4, r4, r4
 8000354:	416d      	adcs	r5, r5
 8000356:	2100      	movs	r1, #0
 8000358:	3e01      	subs	r6, #1
 800035a:	1824      	adds	r4, r4, r0
 800035c:	414d      	adcs	r5, r1
 800035e:	2e00      	cmp	r6, #0
 8000360:	d006      	beq.n	8000370 <__udivmoddi4+0xe8>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d9ee      	bls.n	8000344 <__udivmoddi4+0xbc>
 8000366:	3e01      	subs	r6, #1
 8000368:	1924      	adds	r4, r4, r4
 800036a:	416d      	adcs	r5, r5
 800036c:	2e00      	cmp	r6, #0
 800036e:	d1f8      	bne.n	8000362 <__udivmoddi4+0xda>
 8000370:	465b      	mov	r3, fp
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	1900      	adds	r0, r0, r4
 8000378:	4169      	adcs	r1, r5
 800037a:	2b00      	cmp	r3, #0
 800037c:	db22      	blt.n	80003c4 <__udivmoddi4+0x13c>
 800037e:	002b      	movs	r3, r5
 8000380:	465a      	mov	r2, fp
 8000382:	40d3      	lsrs	r3, r2
 8000384:	002a      	movs	r2, r5
 8000386:	4644      	mov	r4, r8
 8000388:	40e2      	lsrs	r2, r4
 800038a:	001c      	movs	r4, r3
 800038c:	465b      	mov	r3, fp
 800038e:	0015      	movs	r5, r2
 8000390:	2b00      	cmp	r3, #0
 8000392:	db2c      	blt.n	80003ee <__udivmoddi4+0x166>
 8000394:	0026      	movs	r6, r4
 8000396:	409e      	lsls	r6, r3
 8000398:	0033      	movs	r3, r6
 800039a:	0026      	movs	r6, r4
 800039c:	4647      	mov	r7, r8
 800039e:	40be      	lsls	r6, r7
 80003a0:	0032      	movs	r2, r6
 80003a2:	1a80      	subs	r0, r0, r2
 80003a4:	4199      	sbcs	r1, r3
 80003a6:	9000      	str	r0, [sp, #0]
 80003a8:	9101      	str	r1, [sp, #4]
 80003aa:	e7ae      	b.n	800030a <__udivmoddi4+0x82>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	1a9b      	subs	r3, r3, r2
 80003b2:	4652      	mov	r2, sl
 80003b4:	40da      	lsrs	r2, r3
 80003b6:	4641      	mov	r1, r8
 80003b8:	0013      	movs	r3, r2
 80003ba:	464a      	mov	r2, r9
 80003bc:	408a      	lsls	r2, r1
 80003be:	0017      	movs	r7, r2
 80003c0:	431f      	orrs	r7, r3
 80003c2:	e782      	b.n	80002ca <__udivmoddi4+0x42>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	002a      	movs	r2, r5
 80003cc:	4646      	mov	r6, r8
 80003ce:	409a      	lsls	r2, r3
 80003d0:	0023      	movs	r3, r4
 80003d2:	40f3      	lsrs	r3, r6
 80003d4:	4313      	orrs	r3, r2
 80003d6:	e7d5      	b.n	8000384 <__udivmoddi4+0xfc>
 80003d8:	4642      	mov	r2, r8
 80003da:	2320      	movs	r3, #32
 80003dc:	2100      	movs	r1, #0
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	9100      	str	r1, [sp, #0]
 80003e4:	9201      	str	r2, [sp, #4]
 80003e6:	2201      	movs	r2, #1
 80003e8:	40da      	lsrs	r2, r3
 80003ea:	9201      	str	r2, [sp, #4]
 80003ec:	e782      	b.n	80002f4 <__udivmoddi4+0x6c>
 80003ee:	4642      	mov	r2, r8
 80003f0:	2320      	movs	r3, #32
 80003f2:	0026      	movs	r6, r4
 80003f4:	1a9b      	subs	r3, r3, r2
 80003f6:	40de      	lsrs	r6, r3
 80003f8:	002f      	movs	r7, r5
 80003fa:	46b4      	mov	ip, r6
 80003fc:	4097      	lsls	r7, r2
 80003fe:	4666      	mov	r6, ip
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7c9      	b.n	800039a <__udivmoddi4+0x112>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800045c:	21fa      	movs	r1, #250	; 0xfa
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_InitTick+0x2c>)
{
 8000460:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000462:	0089      	lsls	r1, r1, #2
{
 8000464:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000466:	6818      	ldr	r0, [r3, #0]
 8000468:	f7ff fe62 	bl	8000130 <__udivsi3>
 800046c:	f000 f86a 	bl	8000544 <HAL_SYSTICK_Config>
 8000470:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8000472:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000474:	2c00      	cmp	r4, #0
 8000476:	d105      	bne.n	8000484 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000478:	3802      	subs	r0, #2
 800047a:	0022      	movs	r2, r4
 800047c:	0029      	movs	r1, r5
 800047e:	f000 f827 	bl	80004d0 <HAL_NVIC_SetPriority>
 8000482:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	20000078 	.word	0x20000078

0800048c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_Init+0x24>)
{
 8000490:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000492:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000494:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000496:	430b      	orrs	r3, r1
 8000498:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800049a:	f7ff ffdf 	bl	800045c <HAL_InitTick>
 800049e:	1e04      	subs	r4, r0, #0
 80004a0:	d103      	bne.n	80004aa <HAL_Init+0x1e>
    HAL_MspInit();
 80004a2:	f001 fabb 	bl	8001a1c <HAL_MspInit>
}
 80004a6:	0020      	movs	r0, r4
 80004a8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7fb      	b.n	80004a6 <HAL_Init+0x1a>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40022000 	.word	0x40022000

080004b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004b4:	4a02      	ldr	r2, [pc, #8]	; (80004c0 <HAL_IncTick+0xc>)
 80004b6:	6813      	ldr	r3, [r2, #0]
 80004b8:	3301      	adds	r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	4770      	bx	lr
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000118 	.word	0x20000118

080004c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004c4:	4b01      	ldr	r3, [pc, #4]	; (80004cc <HAL_GetTick+0x8>)
 80004c6:	6818      	ldr	r0, [r3, #0]
}
 80004c8:	4770      	bx	lr
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	20000118 	.word	0x20000118

080004d0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004d4:	2800      	cmp	r0, #0
 80004d6:	da14      	bge.n	8000502 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d8:	230f      	movs	r3, #15
 80004da:	b2c0      	uxtb	r0, r0
 80004dc:	4003      	ands	r3, r0
 80004de:	3b08      	subs	r3, #8
 80004e0:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_NVIC_SetPriority+0x58>)
 80004e2:	089b      	lsrs	r3, r3, #2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	189b      	adds	r3, r3, r2
 80004e8:	2203      	movs	r2, #3
 80004ea:	4010      	ands	r0, r2
 80004ec:	4090      	lsls	r0, r2
 80004ee:	32fc      	adds	r2, #252	; 0xfc
 80004f0:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f4:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	69dc      	ldr	r4, [r3, #28]
 80004fa:	43ac      	bics	r4, r5
 80004fc:	4321      	orrs	r1, r4
 80004fe:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	2503      	movs	r5, #3
 8000504:	0883      	lsrs	r3, r0, #2
 8000506:	4028      	ands	r0, r5
 8000508:	40a8      	lsls	r0, r5
 800050a:	35fc      	adds	r5, #252	; 0xfc
 800050c:	002e      	movs	r6, r5
 800050e:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_NVIC_SetPriority+0x5c>)
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	189b      	adds	r3, r3, r2
 8000514:	22c0      	movs	r2, #192	; 0xc0
 8000516:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000518:	4029      	ands	r1, r5
 800051a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	0092      	lsls	r2, r2, #2
 800051e:	589c      	ldr	r4, [r3, r2]
 8000520:	43b4      	bics	r4, r6
 8000522:	4321      	orrs	r1, r4
 8000524:	5099      	str	r1, [r3, r2]
 8000526:	e7eb      	b.n	8000500 <HAL_NVIC_SetPriority+0x30>
 8000528:	e000ed00 	.word	0xe000ed00
 800052c:	e000e100 	.word	0xe000e100

08000530 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000530:	231f      	movs	r3, #31
 8000532:	4018      	ands	r0, r3
 8000534:	3b1e      	subs	r3, #30
 8000536:	4083      	lsls	r3, r0
 8000538:	4a01      	ldr	r2, [pc, #4]	; (8000540 <HAL_NVIC_EnableIRQ+0x10>)
 800053a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	e000e100 	.word	0xe000e100

08000544 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000544:	4a09      	ldr	r2, [pc, #36]	; (800056c <HAL_SYSTICK_Config+0x28>)
 8000546:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000548:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054a:	4293      	cmp	r3, r2
 800054c:	d80d      	bhi.n	800056a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000556:	6a03      	ldr	r3, [r0, #32]
 8000558:	0609      	lsls	r1, r1, #24
 800055a:	021b      	lsls	r3, r3, #8
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	430b      	orrs	r3, r1
 8000560:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000564:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000566:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000568:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056a:	4770      	bx	lr
 800056c:	00ffffff 	.word	0x00ffffff
 8000570:	e000e010 	.word	0xe000e010
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000578:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800057a:	1d84      	adds	r4, r0, #6
 800057c:	7fe3      	ldrb	r3, [r4, #31]
 800057e:	2b02      	cmp	r3, #2
 8000580:	d004      	beq.n	800058c <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000582:	2304      	movs	r3, #4
 8000584:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000586:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000588:	0018      	movs	r0, r3
 800058a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800058c:	210e      	movs	r1, #14
 800058e:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000590:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	438a      	bics	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000598:	2201      	movs	r2, #1
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	4391      	bics	r1, r2
 800059e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005a0:	231c      	movs	r3, #28
 80005a2:	402b      	ands	r3, r5
 80005a4:	0015      	movs	r5, r2
 80005a6:	409d      	lsls	r5, r3
 80005a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80005aa:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80005ac:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80005ae:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80005b0:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80005b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80005b4:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80005b6:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	d0e5      	beq.n	8000588 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80005bc:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80005be:	0023      	movs	r3, r4
 80005c0:	e7e2      	b.n	8000588 <HAL_DMA_Abort_IT+0x10>
	...

080005c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005c6:	4a53      	ldr	r2, [pc, #332]	; (8000714 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80005c8:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005ca:	1882      	adds	r2, r0, r2
 80005cc:	1e54      	subs	r4, r2, #1
 80005ce:	41a2      	sbcs	r2, r4
{
 80005d0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80005d2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80005d4:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80005d6:	3205      	adds	r2, #5
 80005d8:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 80005da:	9a01      	ldr	r2, [sp, #4]
 80005dc:	40da      	lsrs	r2, r3
 80005de:	d101      	bne.n	80005e4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80005e0:	b005      	add	sp, #20
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80005e4:	2501      	movs	r5, #1
 80005e6:	409d      	lsls	r5, r3
 80005e8:	9a01      	ldr	r2, [sp, #4]
 80005ea:	402a      	ands	r2, r5
 80005ec:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80005ee:	d100      	bne.n	80005f2 <HAL_GPIO_Init+0x2e>
 80005f0:	e08d      	b.n	800070e <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80005f2:	684a      	ldr	r2, [r1, #4]
 80005f4:	4694      	mov	ip, r2
 80005f6:	2210      	movs	r2, #16
 80005f8:	4664      	mov	r4, ip
 80005fa:	4394      	bics	r4, r2
 80005fc:	0022      	movs	r2, r4
 80005fe:	3c01      	subs	r4, #1
 8000600:	2a02      	cmp	r2, #2
 8000602:	d11f      	bne.n	8000644 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000604:	2407      	movs	r4, #7
 8000606:	270f      	movs	r7, #15
 8000608:	401c      	ands	r4, r3
 800060a:	00a4      	lsls	r4, r4, #2
 800060c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800060e:	08da      	lsrs	r2, r3, #3
 8000610:	0092      	lsls	r2, r2, #2
 8000612:	1882      	adds	r2, r0, r2
 8000614:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000616:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000618:	690f      	ldr	r7, [r1, #16]
 800061a:	40a7      	lsls	r7, r4
 800061c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800061e:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000620:	2403      	movs	r4, #3
 8000622:	005e      	lsls	r6, r3, #1
 8000624:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 8000626:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000628:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800062a:	68cc      	ldr	r4, [r1, #12]
 800062c:	40b4      	lsls	r4, r6
 800062e:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8000630:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000632:	4662      	mov	r2, ip
 8000634:	06d2      	lsls	r2, r2, #27
 8000636:	0fd2      	lsrs	r2, r2, #31
 8000638:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 800063a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800063c:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800063e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8000640:	6042      	str	r2, [r0, #4]
 8000642:	e001      	b.n	8000648 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000644:	2c01      	cmp	r4, #1
 8000646:	d9eb      	bls.n	8000620 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000648:	2603      	movs	r6, #3
 800064a:	0034      	movs	r4, r6
 800064c:	005d      	lsls	r5, r3, #1
 800064e:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000650:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000652:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000654:	4032      	ands	r2, r6
 8000656:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8000658:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800065a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065c:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 800065e:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8000660:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000662:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000664:	688a      	ldr	r2, [r1, #8]
 8000666:	40aa      	lsls	r2, r5
 8000668:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800066a:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 800066c:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800066e:	00d2      	lsls	r2, r2, #3
 8000670:	d54d      	bpl.n	800070e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000672:	2501      	movs	r5, #1
 8000674:	4c28      	ldr	r4, [pc, #160]	; (8000718 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000676:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000678:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800067a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800067c:	001d      	movs	r5, r3
 800067e:	4035      	ands	r5, r6
 8000680:	00ad      	lsls	r5, r5, #2
 8000682:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000684:	6362      	str	r2, [r4, #52]	; 0x34
 8000686:	4a25      	ldr	r2, [pc, #148]	; (800071c <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000688:	089c      	lsrs	r4, r3, #2
 800068a:	00a4      	lsls	r4, r4, #2
 800068c:	18a4      	adds	r4, r4, r2
 800068e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000690:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000692:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000694:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000696:	05ff      	lsls	r7, r7, #23
 8000698:	2200      	movs	r2, #0
 800069a:	42b8      	cmp	r0, r7
 800069c:	d00c      	beq.n	80006b8 <HAL_GPIO_Init+0xf4>
 800069e:	4f20      	ldr	r7, [pc, #128]	; (8000720 <HAL_GPIO_Init+0x15c>)
 80006a0:	3201      	adds	r2, #1
 80006a2:	42b8      	cmp	r0, r7
 80006a4:	d008      	beq.n	80006b8 <HAL_GPIO_Init+0xf4>
 80006a6:	4f1f      	ldr	r7, [pc, #124]	; (8000724 <HAL_GPIO_Init+0x160>)
 80006a8:	3201      	adds	r2, #1
 80006aa:	42b8      	cmp	r0, r7
 80006ac:	d004      	beq.n	80006b8 <HAL_GPIO_Init+0xf4>
 80006ae:	4f1e      	ldr	r7, [pc, #120]	; (8000728 <HAL_GPIO_Init+0x164>)
 80006b0:	0032      	movs	r2, r6
 80006b2:	42b8      	cmp	r0, r7
 80006b4:	d000      	beq.n	80006b8 <HAL_GPIO_Init+0xf4>
 80006b6:	9a03      	ldr	r2, [sp, #12]
 80006b8:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ba:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80006bc:	9d02      	ldr	r5, [sp, #8]
 80006be:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80006c0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80006c2:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 80006c4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80006c6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80006c8:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80006ca:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80006cc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006ce:	03ff      	lsls	r7, r7, #15
 80006d0:	d401      	bmi.n	80006d6 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 80006d2:	0035      	movs	r5, r6
 80006d4:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80006d8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80006da:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80006dc:	9d00      	ldr	r5, [sp, #0]
 80006de:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e0:	03bf      	lsls	r7, r7, #14
 80006e2:	d401      	bmi.n	80006e8 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 80006e4:	0035      	movs	r5, r6
 80006e6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006e8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80006ea:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80006ec:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80006ee:	9d00      	ldr	r5, [sp, #0]
 80006f0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006f2:	02ff      	lsls	r7, r7, #11
 80006f4:	d401      	bmi.n	80006fa <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 80006f6:	0035      	movs	r5, r6
 80006f8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006fa:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80006fc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80006fe:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000700:	9e00      	ldr	r6, [sp, #0]
 8000702:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000704:	02bf      	lsls	r7, r7, #10
 8000706:	d401      	bmi.n	800070c <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000708:	4025      	ands	r5, r4
 800070a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800070c:	60d6      	str	r6, [r2, #12]
    position++;
 800070e:	3301      	adds	r3, #1
 8000710:	e763      	b.n	80005da <HAL_GPIO_Init+0x16>
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	afffe400 	.word	0xafffe400
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000
 8000720:	50000400 	.word	0x50000400
 8000724:	50000800 	.word	0x50000800
 8000728:	50000c00 	.word	0x50000c00
 800072c:	40010400 	.word	0x40010400

08000730 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000730:	6900      	ldr	r0, [r0, #16]
 8000732:	4008      	ands	r0, r1
 8000734:	1e41      	subs	r1, r0, #1
 8000736:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000738:	b2c0      	uxtb	r0, r0
}
 800073a:	4770      	bx	lr

0800073c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800073c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8000740:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000742:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000744:	400a      	ands	r2, r1
 8000746:	2a08      	cmp	r2, #8
 8000748:	d026      	beq.n	8000798 <HAL_RCC_GetSysClockFreq+0x5c>
 800074a:	2a0c      	cmp	r2, #12
 800074c:	d006      	beq.n	800075c <HAL_RCC_GetSysClockFreq+0x20>
 800074e:	2a04      	cmp	r2, #4
 8000750:	d11a      	bne.n	8000788 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	06db      	lsls	r3, r3, #27
 8000756:	d421      	bmi.n	800079c <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 800075a:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800075c:	028a      	lsls	r2, r1, #10
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000760:	0f12      	lsrs	r2, r2, #28
 8000762:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000764:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000766:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000768:	0f89      	lsrs	r1, r1, #30
 800076a:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800076c:	03c0      	lsls	r0, r0, #15
 800076e:	d504      	bpl.n	800077a <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000770:	480e      	ldr	r0, [pc, #56]	; (80007ac <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000772:	4350      	muls	r0, r2
 8000774:	f7ff fcdc 	bl	8000130 <__udivsi3>
 8000778:	e7ef      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	06db      	lsls	r3, r3, #27
 800077e:	d501      	bpl.n	8000784 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000782:	e7f6      	b.n	8000772 <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000786:	e7f4      	b.n	8000772 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000788:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800078a:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800078c:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800078e:	041b      	lsls	r3, r3, #16
 8000790:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000792:	3301      	adds	r3, #1
 8000794:	4098      	lsls	r0, r3
 8000796:	e7e0      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <HAL_RCC_GetSysClockFreq+0x70>)
 800079a:	e7de      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800079e:	e7dc      	b.n	800075a <HAL_RCC_GetSysClockFreq+0x1e>
 80007a0:	40021000 	.word	0x40021000
 80007a4:	00f42400 	.word	0x00f42400
 80007a8:	08001c28 	.word	0x08001c28
 80007ac:	007a1200 	.word	0x007a1200
 80007b0:	003d0900 	.word	0x003d0900

080007b4 <HAL_RCC_OscConfig>:
{
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	0005      	movs	r5, r0
 80007b8:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80007ba:	2800      	cmp	r0, #0
 80007bc:	d102      	bne.n	80007c4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80007be:	2001      	movs	r0, #1
}
 80007c0:	b007      	add	sp, #28
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007c4:	230c      	movs	r3, #12
 80007c6:	4cbe      	ldr	r4, [pc, #760]	; (8000ac0 <HAL_RCC_OscConfig+0x30c>)
 80007c8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007ca:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007cc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007ce:	2380      	movs	r3, #128	; 0x80
 80007d0:	025b      	lsls	r3, r3, #9
 80007d2:	401a      	ands	r2, r3
 80007d4:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d6:	6802      	ldr	r2, [r0, #0]
 80007d8:	07d2      	lsls	r2, r2, #31
 80007da:	d441      	bmi.n	8000860 <HAL_RCC_OscConfig+0xac>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007dc:	682b      	ldr	r3, [r5, #0]
 80007de:	079b      	lsls	r3, r3, #30
 80007e0:	d500      	bpl.n	80007e4 <HAL_RCC_OscConfig+0x30>
 80007e2:	e087      	b.n	80008f4 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007e4:	682b      	ldr	r3, [r5, #0]
 80007e6:	06db      	lsls	r3, r3, #27
 80007e8:	d528      	bpl.n	800083c <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80007ea:	2e00      	cmp	r6, #0
 80007ec:	d000      	beq.n	80007f0 <HAL_RCC_OscConfig+0x3c>
 80007ee:	e0d9      	b.n	80009a4 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007f0:	6823      	ldr	r3, [r4, #0]
 80007f2:	059b      	lsls	r3, r3, #22
 80007f4:	d502      	bpl.n	80007fc <HAL_RCC_OscConfig+0x48>
 80007f6:	69eb      	ldr	r3, [r5, #28]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0e0      	beq.n	80007be <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007fc:	6862      	ldr	r2, [r4, #4]
 80007fe:	49b1      	ldr	r1, [pc, #708]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 8000800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000802:	400a      	ands	r2, r1
 8000804:	431a      	orrs	r2, r3
 8000806:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000808:	6861      	ldr	r1, [r4, #4]
 800080a:	6a2a      	ldr	r2, [r5, #32]
 800080c:	0209      	lsls	r1, r1, #8
 800080e:	0a09      	lsrs	r1, r1, #8
 8000810:	0612      	lsls	r2, r2, #24
 8000812:	430a      	orrs	r2, r1
 8000814:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	0b5b      	lsrs	r3, r3, #13
 800081a:	3301      	adds	r3, #1
 800081c:	0212      	lsls	r2, r2, #8
 800081e:	409a      	lsls	r2, r3
 8000820:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000822:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000824:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000826:	060a      	lsls	r2, r1, #24
 8000828:	49a7      	ldr	r1, [pc, #668]	; (8000ac8 <HAL_RCC_OscConfig+0x314>)
 800082a:	0f12      	lsrs	r2, r2, #28
 800082c:	5c8a      	ldrb	r2, [r1, r2]
 800082e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000830:	4aa6      	ldr	r2, [pc, #664]	; (8000acc <HAL_RCC_OscConfig+0x318>)
 8000832:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000834:	f7ff fe12 	bl	800045c <HAL_InitTick>
        if(status != HAL_OK)
 8000838:	2800      	cmp	r0, #0
 800083a:	d1c1      	bne.n	80007c0 <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	071b      	lsls	r3, r3, #28
 8000840:	d500      	bpl.n	8000844 <HAL_RCC_OscConfig+0x90>
 8000842:	e0e6      	b.n	8000a12 <HAL_RCC_OscConfig+0x25e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	075b      	lsls	r3, r3, #29
 8000848:	d500      	bpl.n	800084c <HAL_RCC_OscConfig+0x98>
 800084a:	e108      	b.n	8000a5e <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800084c:	682b      	ldr	r3, [r5, #0]
 800084e:	069b      	lsls	r3, r3, #26
 8000850:	d500      	bpl.n	8000854 <HAL_RCC_OscConfig+0xa0>
 8000852:	e18d      	b.n	8000b70 <HAL_RCC_OscConfig+0x3bc>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000854:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000856:	2b00      	cmp	r3, #0
 8000858:	d000      	beq.n	800085c <HAL_RCC_OscConfig+0xa8>
 800085a:	e1bc      	b.n	8000bd6 <HAL_RCC_OscConfig+0x422>
  return HAL_OK;
 800085c:	2000      	movs	r0, #0
 800085e:	e7af      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000860:	2e08      	cmp	r6, #8
 8000862:	d004      	beq.n	800086e <HAL_RCC_OscConfig+0xba>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000864:	2e0c      	cmp	r6, #12
 8000866:	d109      	bne.n	800087c <HAL_RCC_OscConfig+0xc8>
 8000868:	9a01      	ldr	r2, [sp, #4]
 800086a:	2a00      	cmp	r2, #0
 800086c:	d006      	beq.n	800087c <HAL_RCC_OscConfig+0xc8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	039b      	lsls	r3, r3, #14
 8000872:	d5b3      	bpl.n	80007dc <HAL_RCC_OscConfig+0x28>
 8000874:	686b      	ldr	r3, [r5, #4]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1b0      	bne.n	80007dc <HAL_RCC_OscConfig+0x28>
 800087a:	e7a0      	b.n	80007be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800087c:	686a      	ldr	r2, [r5, #4]
 800087e:	429a      	cmp	r2, r3
 8000880:	d111      	bne.n	80008a6 <HAL_RCC_OscConfig+0xf2>
 8000882:	6822      	ldr	r2, [r4, #0]
 8000884:	4313      	orrs	r3, r2
 8000886:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000888:	f7ff fe1c 	bl	80004c4 <HAL_GetTick>
 800088c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	6823      	ldr	r3, [r4, #0]
 8000892:	0292      	lsls	r2, r2, #10
 8000894:	4213      	tst	r3, r2
 8000896:	d1a1      	bne.n	80007dc <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000898:	f7ff fe14 	bl	80004c4 <HAL_GetTick>
 800089c:	1bc0      	subs	r0, r0, r7
 800089e:	2864      	cmp	r0, #100	; 0x64
 80008a0:	d9f5      	bls.n	800088e <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 80008a2:	2003      	movs	r0, #3
 80008a4:	e78c      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a6:	21a0      	movs	r1, #160	; 0xa0
 80008a8:	02c9      	lsls	r1, r1, #11
 80008aa:	428a      	cmp	r2, r1
 80008ac:	d105      	bne.n	80008ba <HAL_RCC_OscConfig+0x106>
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	6821      	ldr	r1, [r4, #0]
 80008b2:	02d2      	lsls	r2, r2, #11
 80008b4:	430a      	orrs	r2, r1
 80008b6:	6022      	str	r2, [r4, #0]
 80008b8:	e7e3      	b.n	8000882 <HAL_RCC_OscConfig+0xce>
 80008ba:	6821      	ldr	r1, [r4, #0]
 80008bc:	4884      	ldr	r0, [pc, #528]	; (8000ad0 <HAL_RCC_OscConfig+0x31c>)
 80008be:	4001      	ands	r1, r0
 80008c0:	6021      	str	r1, [r4, #0]
 80008c2:	6821      	ldr	r1, [r4, #0]
 80008c4:	400b      	ands	r3, r1
 80008c6:	9305      	str	r3, [sp, #20]
 80008c8:	9b05      	ldr	r3, [sp, #20]
 80008ca:	4982      	ldr	r1, [pc, #520]	; (8000ad4 <HAL_RCC_OscConfig+0x320>)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	400b      	ands	r3, r1
 80008d0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d1d8      	bne.n	8000888 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 80008d6:	f7ff fdf5 	bl	80004c4 <HAL_GetTick>
 80008da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	6823      	ldr	r3, [r4, #0]
 80008e0:	0292      	lsls	r2, r2, #10
 80008e2:	4213      	tst	r3, r2
 80008e4:	d100      	bne.n	80008e8 <HAL_RCC_OscConfig+0x134>
 80008e6:	e779      	b.n	80007dc <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008e8:	f7ff fdec 	bl	80004c4 <HAL_GetTick>
 80008ec:	1bc0      	subs	r0, r0, r7
 80008ee:	2864      	cmp	r0, #100	; 0x64
 80008f0:	d9f4      	bls.n	80008dc <HAL_RCC_OscConfig+0x128>
 80008f2:	e7d6      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
    hsi_state = RCC_OscInitStruct->HSIState;
 80008f4:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008f6:	2e04      	cmp	r6, #4
 80008f8:	d004      	beq.n	8000904 <HAL_RCC_OscConfig+0x150>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80008fa:	2e0c      	cmp	r6, #12
 80008fc:	d125      	bne.n	800094a <HAL_RCC_OscConfig+0x196>
 80008fe:	9b01      	ldr	r3, [sp, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d122      	bne.n	800094a <HAL_RCC_OscConfig+0x196>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	075b      	lsls	r3, r3, #29
 8000908:	d502      	bpl.n	8000910 <HAL_RCC_OscConfig+0x15c>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d100      	bne.n	8000910 <HAL_RCC_OscConfig+0x15c>
 800090e:	e756      	b.n	80007be <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000910:	6861      	ldr	r1, [r4, #4]
 8000912:	692b      	ldr	r3, [r5, #16]
 8000914:	4870      	ldr	r0, [pc, #448]	; (8000ad8 <HAL_RCC_OscConfig+0x324>)
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	4001      	ands	r1, r0
 800091a:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800091c:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	438b      	bics	r3, r1
 8000924:	4313      	orrs	r3, r2
 8000926:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000928:	f7ff ff08 	bl	800073c <HAL_RCC_GetSysClockFreq>
 800092c:	68e3      	ldr	r3, [r4, #12]
 800092e:	4a66      	ldr	r2, [pc, #408]	; (8000ac8 <HAL_RCC_OscConfig+0x314>)
 8000930:	061b      	lsls	r3, r3, #24
 8000932:	0f1b      	lsrs	r3, r3, #28
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	40d8      	lsrs	r0, r3
 8000938:	4b64      	ldr	r3, [pc, #400]	; (8000acc <HAL_RCC_OscConfig+0x318>)
 800093a:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fd8d 	bl	800045c <HAL_InitTick>
      if(status != HAL_OK)
 8000942:	2800      	cmp	r0, #0
 8000944:	d100      	bne.n	8000948 <HAL_RCC_OscConfig+0x194>
 8000946:	e74d      	b.n	80007e4 <HAL_RCC_OscConfig+0x30>
 8000948:	e73a      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800094a:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 800094c:	2a00      	cmp	r2, #0
 800094e:	d018      	beq.n	8000982 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000950:	2109      	movs	r1, #9
 8000952:	438b      	bics	r3, r1
 8000954:	4313      	orrs	r3, r2
 8000956:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fdb4 	bl	80004c4 <HAL_GetTick>
 800095c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800095e:	2204      	movs	r2, #4
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	4213      	tst	r3, r2
 8000964:	d007      	beq.n	8000976 <HAL_RCC_OscConfig+0x1c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000966:	6862      	ldr	r2, [r4, #4]
 8000968:	692b      	ldr	r3, [r5, #16]
 800096a:	495b      	ldr	r1, [pc, #364]	; (8000ad8 <HAL_RCC_OscConfig+0x324>)
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	400a      	ands	r2, r1
 8000970:	4313      	orrs	r3, r2
 8000972:	6063      	str	r3, [r4, #4]
 8000974:	e736      	b.n	80007e4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000976:	f7ff fda5 	bl	80004c4 <HAL_GetTick>
 800097a:	1bc0      	subs	r0, r0, r7
 800097c:	2802      	cmp	r0, #2
 800097e:	d9ee      	bls.n	800095e <HAL_RCC_OscConfig+0x1aa>
 8000980:	e78f      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8000982:	2201      	movs	r2, #1
 8000984:	4393      	bics	r3, r2
 8000986:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000988:	f7ff fd9c 	bl	80004c4 <HAL_GetTick>
 800098c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800098e:	2204      	movs	r2, #4
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	4213      	tst	r3, r2
 8000994:	d100      	bne.n	8000998 <HAL_RCC_OscConfig+0x1e4>
 8000996:	e725      	b.n	80007e4 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000998:	f7ff fd94 	bl	80004c4 <HAL_GetTick>
 800099c:	1bc0      	subs	r0, r0, r7
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f5      	bls.n	800098e <HAL_RCC_OscConfig+0x1da>
 80009a2:	e77e      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009a4:	69eb      	ldr	r3, [r5, #28]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d020      	beq.n	80009ec <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_MSI_ENABLE();
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	6822      	ldr	r2, [r4, #0]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009b4:	f7ff fd86 	bl	80004c4 <HAL_GetTick>
 80009b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	4213      	tst	r3, r2
 80009c2:	d00d      	beq.n	80009e0 <HAL_RCC_OscConfig+0x22c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80009c4:	6863      	ldr	r3, [r4, #4]
 80009c6:	4a3f      	ldr	r2, [pc, #252]	; (8000ac4 <HAL_RCC_OscConfig+0x310>)
 80009c8:	4013      	ands	r3, r2
 80009ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80009cc:	4313      	orrs	r3, r2
 80009ce:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009d0:	6862      	ldr	r2, [r4, #4]
 80009d2:	6a2b      	ldr	r3, [r5, #32]
 80009d4:	0212      	lsls	r2, r2, #8
 80009d6:	061b      	lsls	r3, r3, #24
 80009d8:	0a12      	lsrs	r2, r2, #8
 80009da:	4313      	orrs	r3, r2
 80009dc:	6063      	str	r3, [r4, #4]
 80009de:	e72d      	b.n	800083c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009e0:	f7ff fd70 	bl	80004c4 <HAL_GetTick>
 80009e4:	1bc0      	subs	r0, r0, r7
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9e7      	bls.n	80009ba <HAL_RCC_OscConfig+0x206>
 80009ea:	e75a      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_MSI_DISABLE();
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	4a3b      	ldr	r2, [pc, #236]	; (8000adc <HAL_RCC_OscConfig+0x328>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fd66 	bl	80004c4 <HAL_GetTick>
 80009f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	4213      	tst	r3, r2
 8000a02:	d100      	bne.n	8000a06 <HAL_RCC_OscConfig+0x252>
 8000a04:	e71a      	b.n	800083c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a06:	f7ff fd5d 	bl	80004c4 <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9f4      	bls.n	80009fa <HAL_RCC_OscConfig+0x246>
 8000a10:	e747      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a12:	696a      	ldr	r2, [r5, #20]
 8000a14:	2301      	movs	r3, #1
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d010      	beq.n	8000a3c <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8000a1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a20:	f7ff fd50 	bl	80004c4 <HAL_GetTick>
 8000a24:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a26:	2202      	movs	r2, #2
 8000a28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a2a:	4213      	tst	r3, r2
 8000a2c:	d000      	beq.n	8000a30 <HAL_RCC_OscConfig+0x27c>
 8000a2e:	e709      	b.n	8000844 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a30:	f7ff fd48 	bl	80004c4 <HAL_GetTick>
 8000a34:	1bc0      	subs	r0, r0, r7
 8000a36:	2802      	cmp	r0, #2
 8000a38:	d9f5      	bls.n	8000a26 <HAL_RCC_OscConfig+0x272>
 8000a3a:	e732      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
      __HAL_RCC_LSI_DISABLE();
 8000a3c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a3e:	439a      	bics	r2, r3
 8000a40:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a42:	f7ff fd3f 	bl	80004c4 <HAL_GetTick>
 8000a46:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a4c:	4213      	tst	r3, r2
 8000a4e:	d100      	bne.n	8000a52 <HAL_RCC_OscConfig+0x29e>
 8000a50:	e6f8      	b.n	8000844 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a52:	f7ff fd37 	bl	80004c4 <HAL_GetTick>
 8000a56:	1bc0      	subs	r0, r0, r7
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9f5      	bls.n	8000a48 <HAL_RCC_OscConfig+0x294>
 8000a5c:	e721      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a5e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a60:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a64:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8000a66:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a68:	421a      	tst	r2, r3
 8000a6a:	d104      	bne.n	8000a76 <HAL_RCC_OscConfig+0x2c2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	4f19      	ldr	r7, [pc, #100]	; (8000ae0 <HAL_RCC_OscConfig+0x32c>)
 8000a7a:	0052      	lsls	r2, r2, #1
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	4213      	tst	r3, r2
 8000a80:	d008      	beq.n	8000a94 <HAL_RCC_OscConfig+0x2e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	68ab      	ldr	r3, [r5, #8]
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d12b      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x330>
 8000a8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	6523      	str	r3, [r4, #80]	; 0x50
 8000a92:	e04c      	b.n	8000b2e <HAL_RCC_OscConfig+0x37a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000a9e:	f7ff fd11 	bl	80004c4 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000aa6:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	9a03      	ldr	r2, [sp, #12]
 8000aae:	4213      	tst	r3, r2
 8000ab0:	d1e7      	bne.n	8000a82 <HAL_RCC_OscConfig+0x2ce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ab2:	f7ff fd07 	bl	80004c4 <HAL_GetTick>
 8000ab6:	9b02      	ldr	r3, [sp, #8]
 8000ab8:	1ac0      	subs	r0, r0, r3
 8000aba:	2864      	cmp	r0, #100	; 0x64
 8000abc:	d9f5      	bls.n	8000aaa <HAL_RCC_OscConfig+0x2f6>
 8000abe:	e6f0      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	ffff1fff 	.word	0xffff1fff
 8000ac8:	08001c10 	.word	0x08001c10
 8000acc:	20000078 	.word	0x20000078
 8000ad0:	fffeffff 	.word	0xfffeffff
 8000ad4:	fffbffff 	.word	0xfffbffff
 8000ad8:	ffffe0ff 	.word	0xffffe0ff
 8000adc:	fffffeff 	.word	0xfffffeff
 8000ae0:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d116      	bne.n	8000b16 <HAL_RCC_OscConfig+0x362>
 8000ae8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000aea:	4a6c      	ldr	r2, [pc, #432]	; (8000c9c <HAL_RCC_OscConfig+0x4e8>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	6523      	str	r3, [r4, #80]	; 0x50
 8000af0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000af2:	4a6b      	ldr	r2, [pc, #428]	; (8000ca0 <HAL_RCC_OscConfig+0x4ec>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000af8:	f7ff fce4 	bl	80004c4 <HAL_GetTick>
 8000afc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b02:	0092      	lsls	r2, r2, #2
 8000b04:	4213      	tst	r3, r2
 8000b06:	d02a      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3aa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b08:	f7ff fcdc 	bl	80004c4 <HAL_GetTick>
 8000b0c:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <HAL_RCC_OscConfig+0x4f0>)
 8000b0e:	1bc0      	subs	r0, r0, r7
 8000b10:	4298      	cmp	r0, r3
 8000b12:	d9f4      	bls.n	8000afe <HAL_RCC_OscConfig+0x34a>
 8000b14:	e6c5      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b16:	21a0      	movs	r1, #160	; 0xa0
 8000b18:	00c9      	lsls	r1, r1, #3
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d10b      	bne.n	8000b36 <HAL_RCC_OscConfig+0x382>
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	430b      	orrs	r3, r1
 8000b26:	6523      	str	r3, [r4, #80]	; 0x50
 8000b28:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000b2e:	f7ff fcc9 	bl	80004c4 <HAL_GetTick>
 8000b32:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b34:	e00e      	b.n	8000b54 <HAL_RCC_OscConfig+0x3a0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b38:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <HAL_RCC_OscConfig+0x4e8>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	6523      	str	r3, [r4, #80]	; 0x50
 8000b3e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b40:	4a57      	ldr	r2, [pc, #348]	; (8000ca0 <HAL_RCC_OscConfig+0x4ec>)
 8000b42:	4013      	ands	r3, r2
 8000b44:	e7a4      	b.n	8000a90 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b46:	f7ff fcbd 	bl	80004c4 <HAL_GetTick>
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <HAL_RCC_OscConfig+0x4f0>)
 8000b4c:	1bc0      	subs	r0, r0, r7
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d900      	bls.n	8000b54 <HAL_RCC_OscConfig+0x3a0>
 8000b52:	e6a6      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000b58:	0092      	lsls	r2, r2, #2
 8000b5a:	4213      	tst	r3, r2
 8000b5c:	d0f3      	beq.n	8000b46 <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8000b5e:	9b01      	ldr	r3, [sp, #4]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d000      	beq.n	8000b66 <HAL_RCC_OscConfig+0x3b2>
 8000b64:	e672      	b.n	800084c <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000b68:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_RCC_OscConfig+0x4f4>)
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8000b6e:	e66d      	b.n	800084c <HAL_RCC_OscConfig+0x98>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b70:	69a9      	ldr	r1, [r5, #24]
 8000b72:	2301      	movs	r3, #1
 8000b74:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <HAL_RCC_OscConfig+0x4f8>)
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d018      	beq.n	8000bac <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_HSI48_ENABLE();
 8000b7a:	68a1      	ldr	r1, [r4, #8]
 8000b7c:	4319      	orrs	r1, r3
 8000b7e:	60a1      	str	r1, [r4, #8]
 8000b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b82:	430b      	orrs	r3, r1
 8000b84:	6363      	str	r3, [r4, #52]	; 0x34
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	6a11      	ldr	r1, [r2, #32]
 8000b8a:	019b      	lsls	r3, r3, #6
 8000b8c:	430b      	orrs	r3, r1
 8000b8e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000b90:	f7ff fc98 	bl	80004c4 <HAL_GetTick>
 8000b94:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b96:	2202      	movs	r2, #2
 8000b98:	68a3      	ldr	r3, [r4, #8]
 8000b9a:	4213      	tst	r3, r2
 8000b9c:	d000      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x3ec>
 8000b9e:	e659      	b.n	8000854 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000ba0:	f7ff fc90 	bl	80004c4 <HAL_GetTick>
 8000ba4:	1bc0      	subs	r0, r0, r7
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9f5      	bls.n	8000b96 <HAL_RCC_OscConfig+0x3e2>
 8000baa:	e67a      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI48_DISABLE();
 8000bac:	68a1      	ldr	r1, [r4, #8]
 8000bae:	4399      	bics	r1, r3
 8000bb0:	60a1      	str	r1, [r4, #8]
 8000bb2:	6a13      	ldr	r3, [r2, #32]
 8000bb4:	493e      	ldr	r1, [pc, #248]	; (8000cb0 <HAL_RCC_OscConfig+0x4fc>)
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000bba:	f7ff fc83 	bl	80004c4 <HAL_GetTick>
 8000bbe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	68a3      	ldr	r3, [r4, #8]
 8000bc4:	4213      	tst	r3, r2
 8000bc6:	d100      	bne.n	8000bca <HAL_RCC_OscConfig+0x416>
 8000bc8:	e644      	b.n	8000854 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000bca:	f7ff fc7b 	bl	80004c4 <HAL_GetTick>
 8000bce:	1bc0      	subs	r0, r0, r7
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f5      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x40c>
 8000bd4:	e665      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bd6:	2e0c      	cmp	r6, #12
 8000bd8:	d043      	beq.n	8000c62 <HAL_RCC_OscConfig+0x4ae>
 8000bda:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <HAL_RCC_OscConfig+0x500>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d12e      	bne.n	8000c3e <HAL_RCC_OscConfig+0x48a>
        __HAL_RCC_PLL_DISABLE();
 8000be0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000be2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000be4:	4013      	ands	r3, r2
 8000be6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000be8:	f7ff fc6c 	bl	80004c4 <HAL_GetTick>
 8000bec:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000bee:	04b6      	lsls	r6, r6, #18
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	4233      	tst	r3, r6
 8000bf4:	d11d      	bne.n	8000c32 <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bf6:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000bf8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000bfa:	68e2      	ldr	r2, [r4, #12]
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c00:	400a      	ands	r2, r1
 8000c02:	4313      	orrs	r3, r2
 8000c04:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c06:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	6822      	ldr	r2, [r4, #0]
 8000c10:	045b      	lsls	r3, r3, #17
 8000c12:	4313      	orrs	r3, r2
 8000c14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc55 	bl	80004c4 <HAL_GetTick>
 8000c1a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000c1c:	04ad      	lsls	r5, r5, #18
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	422b      	tst	r3, r5
 8000c22:	d000      	beq.n	8000c26 <HAL_RCC_OscConfig+0x472>
 8000c24:	e61a      	b.n	800085c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c26:	f7ff fc4d 	bl	80004c4 <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	2802      	cmp	r0, #2
 8000c2e:	d9f6      	bls.n	8000c1e <HAL_RCC_OscConfig+0x46a>
 8000c30:	e637      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c32:	f7ff fc47 	bl	80004c4 <HAL_GetTick>
 8000c36:	1bc0      	subs	r0, r0, r7
 8000c38:	2802      	cmp	r0, #2
 8000c3a:	d9d9      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x43c>
 8000c3c:	e631      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_PLL_DISABLE();
 8000c3e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c40:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000c42:	4013      	ands	r3, r2
 8000c44:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c46:	f7ff fc3d 	bl	80004c4 <HAL_GetTick>
 8000c4a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000c4c:	04ad      	lsls	r5, r5, #18
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	422b      	tst	r3, r5
 8000c52:	d100      	bne.n	8000c56 <HAL_RCC_OscConfig+0x4a2>
 8000c54:	e602      	b.n	800085c <HAL_RCC_OscConfig+0xa8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c56:	f7ff fc35 	bl	80004c4 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	2802      	cmp	r0, #2
 8000c5e:	d9f6      	bls.n	8000c4e <HAL_RCC_OscConfig+0x49a>
 8000c60:	e61f      	b.n	80008a2 <HAL_RCC_OscConfig+0xee>
        return HAL_ERROR;
 8000c62:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d100      	bne.n	8000c6a <HAL_RCC_OscConfig+0x4b6>
 8000c68:	e5aa      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c6a:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000c6c:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c6e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000c70:	0252      	lsls	r2, r2, #9
 8000c72:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000c74:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c76:	428a      	cmp	r2, r1
 8000c78:	d000      	beq.n	8000c7c <HAL_RCC_OscConfig+0x4c8>
 8000c7a:	e5a1      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c7c:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c7e:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c80:	0392      	lsls	r2, r2, #14
 8000c82:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c84:	428a      	cmp	r2, r1
 8000c86:	d000      	beq.n	8000c8a <HAL_RCC_OscConfig+0x4d6>
 8000c88:	e59a      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000c8a:	20c0      	movs	r0, #192	; 0xc0
 8000c8c:	0400      	lsls	r0, r0, #16
 8000c8e:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000c90:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000c92:	1a18      	subs	r0, r3, r0
 8000c94:	1e43      	subs	r3, r0, #1
 8000c96:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000c98:	b2c0      	uxtb	r0, r0
 8000c9a:	e591      	b.n	80007c0 <HAL_RCC_OscConfig+0xc>
 8000c9c:	fffffeff 	.word	0xfffffeff
 8000ca0:	fffffbff 	.word	0xfffffbff
 8000ca4:	00001388 	.word	0x00001388
 8000ca8:	efffffff 	.word	0xefffffff
 8000cac:	40010000 	.word	0x40010000
 8000cb0:	ffffdfff 	.word	0xffffdfff
 8000cb4:	feffffff 	.word	0xfeffffff
 8000cb8:	ff02ffff 	.word	0xff02ffff

08000cbc <HAL_RCC_ClockConfig>:
{
 8000cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cbe:	1e06      	subs	r6, r0, #0
 8000cc0:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000cc2:	d101      	bne.n	8000cc8 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000cc4:	2001      	movs	r0, #1
}
 8000cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4c51      	ldr	r4, [pc, #324]	; (8000e10 <HAL_RCC_ClockConfig+0x154>)
 8000ccc:	9901      	ldr	r1, [sp, #4]
 8000cce:	6823      	ldr	r3, [r4, #0]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d327      	bcc.n	8000d26 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd6:	6832      	ldr	r2, [r6, #0]
 8000cd8:	0793      	lsls	r3, r2, #30
 8000cda:	d42f      	bmi.n	8000d3c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cdc:	07d3      	lsls	r3, r2, #31
 8000cde:	d435      	bmi.n	8000d4c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	6822      	ldr	r2, [r4, #0]
 8000ce4:	9901      	ldr	r1, [sp, #4]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d200      	bcs.n	8000cee <HAL_RCC_ClockConfig+0x32>
 8000cec:	e081      	b.n	8000df2 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cee:	6832      	ldr	r2, [r6, #0]
 8000cf0:	4c48      	ldr	r4, [pc, #288]	; (8000e14 <HAL_RCC_ClockConfig+0x158>)
 8000cf2:	0753      	lsls	r3, r2, #29
 8000cf4:	d500      	bpl.n	8000cf8 <HAL_RCC_ClockConfig+0x3c>
 8000cf6:	e084      	b.n	8000e02 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf8:	0713      	lsls	r3, r2, #28
 8000cfa:	d506      	bpl.n	8000d0a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cfc:	68e2      	ldr	r2, [r4, #12]
 8000cfe:	6933      	ldr	r3, [r6, #16]
 8000d00:	4945      	ldr	r1, [pc, #276]	; (8000e18 <HAL_RCC_ClockConfig+0x15c>)
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	400a      	ands	r2, r1
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d0a:	f7ff fd17 	bl	800073c <HAL_RCC_GetSysClockFreq>
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_RCC_ClockConfig+0x160>)
 8000d12:	061b      	lsls	r3, r3, #24
 8000d14:	0f1b      	lsrs	r3, r3, #28
 8000d16:	5cd3      	ldrb	r3, [r2, r3]
 8000d18:	40d8      	lsrs	r0, r3
 8000d1a:	4b41      	ldr	r3, [pc, #260]	; (8000e20 <HAL_RCC_ClockConfig+0x164>)
 8000d1c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f7ff fb9c 	bl	800045c <HAL_InitTick>
 8000d24:	e7cf      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	9901      	ldr	r1, [sp, #4]
 8000d2a:	4393      	bics	r3, r2
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	4013      	ands	r3, r2
 8000d34:	9a01      	ldr	r2, [sp, #4]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d1c4      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
 8000d3a:	e7cc      	b.n	8000cd6 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d3c:	20f0      	movs	r0, #240	; 0xf0
 8000d3e:	4935      	ldr	r1, [pc, #212]	; (8000e14 <HAL_RCC_ClockConfig+0x158>)
 8000d40:	68cb      	ldr	r3, [r1, #12]
 8000d42:	4383      	bics	r3, r0
 8000d44:	68b0      	ldr	r0, [r6, #8]
 8000d46:	4303      	orrs	r3, r0
 8000d48:	60cb      	str	r3, [r1, #12]
 8000d4a:	e7c7      	b.n	8000cdc <HAL_RCC_ClockConfig+0x20>
 8000d4c:	4d31      	ldr	r5, [pc, #196]	; (8000e14 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d50:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d52:	2a02      	cmp	r2, #2
 8000d54:	d119      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000d56:	039b      	lsls	r3, r3, #14
 8000d58:	d5b4      	bpl.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d5a:	2103      	movs	r1, #3
 8000d5c:	68eb      	ldr	r3, [r5, #12]
 8000d5e:	438b      	bics	r3, r1
 8000d60:	4313      	orrs	r3, r2
 8000d62:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000d64:	f7ff fbae 	bl	80004c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d68:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d6a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d119      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	220c      	movs	r2, #12
 8000d72:	68eb      	ldr	r3, [r5, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d0b2      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7a:	f7ff fba3 	bl	80004c4 <HAL_GetTick>
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <HAL_RCC_ClockConfig+0x168>)
 8000d80:	1bc0      	subs	r0, r0, r7
 8000d82:	4298      	cmp	r0, r3
 8000d84:	d9f4      	bls.n	8000d70 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000d86:	2003      	movs	r0, #3
 8000d88:	e79d      	b.n	8000cc6 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d8a:	2a03      	cmp	r2, #3
 8000d8c:	d102      	bne.n	8000d94 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000d8e:	019b      	lsls	r3, r3, #6
 8000d90:	d4e3      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x9e>
 8000d92:	e797      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d94:	2a01      	cmp	r2, #1
 8000d96:	d102      	bne.n	8000d9e <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000d98:	075b      	lsls	r3, r3, #29
 8000d9a:	d4de      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x9e>
 8000d9c:	e792      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000d9e:	059b      	lsls	r3, r3, #22
 8000da0:	d4db      	bmi.n	8000d5a <HAL_RCC_ClockConfig+0x9e>
 8000da2:	e78f      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d10b      	bne.n	8000dc0 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000da8:	220c      	movs	r2, #12
 8000daa:	68eb      	ldr	r3, [r5, #12]
 8000dac:	4013      	ands	r3, r2
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d096      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000db2:	f7ff fb87 	bl	80004c4 <HAL_GetTick>
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_RCC_ClockConfig+0x168>)
 8000db8:	1bc0      	subs	r0, r0, r7
 8000dba:	4298      	cmp	r0, r3
 8000dbc:	d9f4      	bls.n	8000da8 <HAL_RCC_ClockConfig+0xec>
 8000dbe:	e7e2      	b.n	8000d86 <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d010      	beq.n	8000de6 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000dc4:	220c      	movs	r2, #12
 8000dc6:	68eb      	ldr	r3, [r5, #12]
 8000dc8:	4213      	tst	r3, r2
 8000dca:	d089      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dcc:	f7ff fb7a 	bl	80004c4 <HAL_GetTick>
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <HAL_RCC_ClockConfig+0x168>)
 8000dd2:	1bc0      	subs	r0, r0, r7
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d9f5      	bls.n	8000dc4 <HAL_RCC_ClockConfig+0x108>
 8000dd8:	e7d5      	b.n	8000d86 <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dda:	f7ff fb73 	bl	80004c4 <HAL_GetTick>
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_RCC_ClockConfig+0x168>)
 8000de0:	1bc0      	subs	r0, r0, r7
 8000de2:	4298      	cmp	r0, r3
 8000de4:	d8cf      	bhi.n	8000d86 <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000de6:	220c      	movs	r2, #12
 8000de8:	68eb      	ldr	r3, [r5, #12]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d1f4      	bne.n	8000dda <HAL_RCC_ClockConfig+0x11e>
 8000df0:	e776      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000df2:	6822      	ldr	r2, [r4, #0]
 8000df4:	439a      	bics	r2, r3
 8000df6:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	421a      	tst	r2, r3
 8000dfc:	d000      	beq.n	8000e00 <HAL_RCC_ClockConfig+0x144>
 8000dfe:	e761      	b.n	8000cc4 <HAL_RCC_ClockConfig+0x8>
 8000e00:	e775      	b.n	8000cee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e02:	68e3      	ldr	r3, [r4, #12]
 8000e04:	4908      	ldr	r1, [pc, #32]	; (8000e28 <HAL_RCC_ClockConfig+0x16c>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	68f1      	ldr	r1, [r6, #12]
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	60e3      	str	r3, [r4, #12]
 8000e0e:	e773      	b.n	8000cf8 <HAL_RCC_ClockConfig+0x3c>
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	ffffc7ff 	.word	0xffffc7ff
 8000e1c:	08001c10 	.word	0x08001c10
 8000e20:	20000078 	.word	0x20000078
 8000e24:	00001388 	.word	0x00001388
 8000e28:	fffff8ff 	.word	0xfffff8ff

08000e2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	0f5b      	lsrs	r3, r3, #29
 8000e36:	5cd3      	ldrb	r3, [r2, r3]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	40d8      	lsrs	r0, r3
}
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	08001c20 	.word	0x08001c20
 8000e48:	20000078 	.word	0x20000078

08000e4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	049b      	lsls	r3, r3, #18
 8000e54:	0f5b      	lsrs	r3, r3, #29
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e5a:	6810      	ldr	r0, [r2, #0]
 8000e5c:	40d8      	lsrs	r0, r3
}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	08001c20 	.word	0x08001c20
 8000e68:	20000078 	.word	0x20000078

08000e6c <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e6c:	2382      	movs	r3, #130	; 0x82
{
 8000e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e70:	6802      	ldr	r2, [r0, #0]
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8000e72:	011b      	lsls	r3, r3, #4
{
 8000e74:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000e76:	421a      	tst	r2, r3
 8000e78:	d047      	beq.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e7c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7e:	4c5f      	ldr	r4, [pc, #380]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000e80:	055b      	lsls	r3, r3, #21
 8000e82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000e84:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e86:	421a      	tst	r2, r3
 8000e88:	d104      	bne.n	8000e94 <HAL_RCCEx_PeriphCLKConfig+0x28>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000e90:	2301      	movs	r3, #1
 8000e92:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	2780      	movs	r7, #128	; 0x80
 8000e96:	4e5a      	ldr	r6, [pc, #360]	; (8001000 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8000e98:	007f      	lsls	r7, r7, #1
 8000e9a:	6833      	ldr	r3, [r6, #0]
 8000e9c:	423b      	tst	r3, r7
 8000e9e:	d06d      	beq.n	8000f7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ea0:	6869      	ldr	r1, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ea2:	22c0      	movs	r2, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000ea4:	0008      	movs	r0, r1
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000ea6:	6823      	ldr	r3, [r4, #0]
 8000ea8:	0392      	lsls	r2, r2, #14
 8000eaa:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000eac:	4010      	ands	r0, r2
 8000eae:	4283      	cmp	r3, r0
 8000eb0:	d103      	bne.n	8000eba <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8000eb2:	68a8      	ldr	r0, [r5, #8]
 8000eb4:	4002      	ands	r2, r0
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d009      	beq.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0x62>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8000eba:	23c0      	movs	r3, #192	; 0xc0
 8000ebc:	000a      	movs	r2, r1
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d103      	bne.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0x62>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000ec6:	6823      	ldr	r3, [r4, #0]
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8000ec8:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000eca:	039b      	lsls	r3, r3, #14
 8000ecc:	d466      	bmi.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000ece:	22c0      	movs	r2, #192	; 0xc0
 8000ed0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ed2:	0292      	lsls	r2, r2, #10
 8000ed4:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000ed6:	d162      	bne.n	8000f9e <HAL_RCCEx_PeriphCLKConfig+0x132>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ed8:	6869      	ldr	r1, [r5, #4]
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	000a      	movs	r2, r1
 8000ede:	029b      	lsls	r3, r3, #10
 8000ee0:	401a      	ands	r2, r3
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d107      	bne.n	8000ef6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	4846      	ldr	r0, [pc, #280]	; (8001004 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8000eea:	4003      	ands	r3, r0
 8000eec:	20c0      	movs	r0, #192	; 0xc0
 8000eee:	0380      	lsls	r0, r0, #14
 8000ef0:	4001      	ands	r1, r0
 8000ef2:	430b      	orrs	r3, r1
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ef8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000efa:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000efc:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d103      	bne.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f04:	4a40      	ldr	r2, [pc, #256]	; (8001008 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	07da      	lsls	r2, r3, #31
 8000f0e:	d506      	bpl.n	8000f1e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000f10:	2003      	movs	r0, #3
 8000f12:	493a      	ldr	r1, [pc, #232]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f14:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f16:	4382      	bics	r2, r0
 8000f18:	68e8      	ldr	r0, [r5, #12]
 8000f1a:	4302      	orrs	r2, r0
 8000f1c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000f1e:	079a      	lsls	r2, r3, #30
 8000f20:	d506      	bpl.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000f22:	200c      	movs	r0, #12
 8000f24:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f26:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f28:	4382      	bics	r2, r0
 8000f2a:	6928      	ldr	r0, [r5, #16]
 8000f2c:	4302      	orrs	r2, r0
 8000f2e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000f30:	075a      	lsls	r2, r3, #29
 8000f32:	d506      	bpl.n	8000f42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000f34:	4931      	ldr	r1, [pc, #196]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f36:	4835      	ldr	r0, [pc, #212]	; (800100c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8000f38:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f3a:	4002      	ands	r2, r0
 8000f3c:	6968      	ldr	r0, [r5, #20]
 8000f3e:	4302      	orrs	r2, r0
 8000f40:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000f42:	071a      	lsls	r2, r3, #28
 8000f44:	d506      	bpl.n	8000f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000f46:	492d      	ldr	r1, [pc, #180]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f48:	4831      	ldr	r0, [pc, #196]	; (8001010 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8000f4a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f4c:	4002      	ands	r2, r0
 8000f4e:	69a8      	ldr	r0, [r5, #24]
 8000f50:	4302      	orrs	r2, r0
 8000f52:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000f54:	065a      	lsls	r2, r3, #25
 8000f56:	d506      	bpl.n	8000f66 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f58:	4928      	ldr	r1, [pc, #160]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f5a:	482e      	ldr	r0, [pc, #184]	; (8001014 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8000f5c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000f5e:	4002      	ands	r2, r0
 8000f60:	6a28      	ldr	r0, [r5, #32]
 8000f62:	4302      	orrs	r2, r0
 8000f64:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000f66:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000f68:	061b      	lsls	r3, r3, #24
 8000f6a:	d517      	bpl.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000f6c:	4a23      	ldr	r2, [pc, #140]	; (8000ffc <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8000f6e:	492a      	ldr	r1, [pc, #168]	; (8001018 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8000f70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000f72:	400b      	ands	r3, r1
 8000f74:	69e9      	ldr	r1, [r5, #28]
 8000f76:	430b      	orrs	r3, r1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	e00f      	b.n	8000f9c <HAL_RCCEx_PeriphCLKConfig+0x130>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7c:	6833      	ldr	r3, [r6, #0]
 8000f7e:	433b      	orrs	r3, r7
 8000f80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f82:	f7ff fa9f 	bl	80004c4 <HAL_GetTick>
 8000f86:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	6833      	ldr	r3, [r6, #0]
 8000f8a:	423b      	tst	r3, r7
 8000f8c:	d188      	bne.n	8000ea0 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f8e:	f7ff fa99 	bl	80004c4 <HAL_GetTick>
 8000f92:	9b01      	ldr	r3, [sp, #4]
 8000f94:	1ac0      	subs	r0, r0, r3
 8000f96:	2864      	cmp	r0, #100	; 0x64
 8000f98:	d9f6      	bls.n	8000f88 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
}
 8000f9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000f9e:	4011      	ands	r1, r2
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d002      	beq.n	8000faa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000fa4:	6829      	ldr	r1, [r5, #0]
 8000fa6:	0689      	lsls	r1, r1, #26
 8000fa8:	d408      	bmi.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0x150>
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8000faa:	68a9      	ldr	r1, [r5, #8]
 8000fac:	400a      	ands	r2, r1
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d100      	bne.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8000fb2:	e791      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	051b      	lsls	r3, r3, #20
 8000fb8:	d400      	bmi.n	8000fbc <HAL_RCCEx_PeriphCLKConfig+0x150>
 8000fba:	e78d      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fbc:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fbe:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000fc0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000fc2:	0312      	lsls	r2, r2, #12
 8000fc4:	4302      	orrs	r2, r0
 8000fc6:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fc8:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000fce:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000fd0:	4002      	ands	r2, r0
 8000fd2:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000fd4:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000fd6:	05cb      	lsls	r3, r1, #23
 8000fd8:	d400      	bmi.n	8000fdc <HAL_RCCEx_PeriphCLKConfig+0x170>
 8000fda:	e77d      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fa72 	bl	80004c4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe0:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000fe2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe4:	00bf      	lsls	r7, r7, #2
 8000fe6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000fe8:	423b      	tst	r3, r7
 8000fea:	d000      	beq.n	8000fee <HAL_RCCEx_PeriphCLKConfig+0x182>
 8000fec:	e774      	b.n	8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fa69 	bl	80004c4 <HAL_GetTick>
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8000ff4:	1b80      	subs	r0, r0, r6
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	d9f5      	bls.n	8000fe6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8000ffa:	e7ce      	b.n	8000f9a <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40007000 	.word	0x40007000
 8001004:	ffcfffff 	.word	0xffcfffff
 8001008:	efffffff 	.word	0xefffffff
 800100c:	fffff3ff 	.word	0xfffff3ff
 8001010:	ffffcfff 	.word	0xffffcfff
 8001014:	fbffffff 	.word	0xfbffffff
 8001018:	fff3ffff 	.word	0xfff3ffff
 800101c:	fffcffff 	.word	0xfffcffff
 8001020:	fff7ffff 	.word	0xfff7ffff
 8001024:	00001388 	.word	0x00001388

08001028 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001028:	6803      	ldr	r3, [r0, #0]
 800102a:	4907      	ldr	r1, [pc, #28]	; (8001048 <UART_EndRxTransfer+0x20>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	400a      	ands	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	3123      	adds	r1, #35	; 0x23
 8001036:	31ff      	adds	r1, #255	; 0xff
 8001038:	438a      	bics	r2, r1
 800103a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800103c:	2320      	movs	r3, #32
 800103e:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001040:	2300      	movs	r3, #0
 8001042:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001044:	4770      	bx	lr
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	fffffedf 	.word	0xfffffedf

0800104c <HAL_UART_Receive_IT>:
{
 800104c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800104e:	6f84      	ldr	r4, [r0, #120]	; 0x78
{
 8001050:	0003      	movs	r3, r0
    return HAL_BUSY;
 8001052:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001054:	2c20      	cmp	r4, #32
 8001056:	d141      	bne.n	80010dc <HAL_UART_Receive_IT+0x90>
      return HAL_ERROR;
 8001058:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800105a:	2900      	cmp	r1, #0
 800105c:	d03e      	beq.n	80010dc <HAL_UART_Receive_IT+0x90>
 800105e:	2a00      	cmp	r2, #0
 8001060:	d03c      	beq.n	80010dc <HAL_UART_Receive_IT+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001062:	2580      	movs	r5, #128	; 0x80
 8001064:	689c      	ldr	r4, [r3, #8]
 8001066:	016d      	lsls	r5, r5, #5
 8001068:	42ac      	cmp	r4, r5
 800106a:	d104      	bne.n	8001076 <HAL_UART_Receive_IT+0x2a>
 800106c:	691d      	ldr	r5, [r3, #16]
 800106e:	2d00      	cmp	r5, #0
 8001070:	d101      	bne.n	8001076 <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1) != 0)
 8001072:	4201      	tst	r1, r0
 8001074:	d132      	bne.n	80010dc <HAL_UART_Receive_IT+0x90>
    __HAL_LOCK(huart);
 8001076:	001d      	movs	r5, r3
 8001078:	3570      	adds	r5, #112	; 0x70
 800107a:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 800107c:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800107e:	2e01      	cmp	r6, #1
 8001080:	d02c      	beq.n	80010dc <HAL_UART_Receive_IT+0x90>
 8001082:	3801      	subs	r0, #1
 8001084:	7028      	strb	r0, [r5, #0]
    huart->pRxBuffPtr  = pData;
 8001086:	6559      	str	r1, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001088:	0019      	movs	r1, r3
 800108a:	3158      	adds	r1, #88	; 0x58
 800108c:	800a      	strh	r2, [r1, #0]
    huart->RxXferCount = Size;
 800108e:	804a      	strh	r2, [r1, #2]
    UART_MASK_COMPUTATION(huart);
 8001090:	2080      	movs	r0, #128	; 0x80
    huart->RxISR       = NULL;
 8001092:	2100      	movs	r1, #0
 8001094:	001a      	movs	r2, r3
 8001096:	6619      	str	r1, [r3, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001098:	0140      	lsls	r0, r0, #5
 800109a:	325c      	adds	r2, #92	; 0x5c
 800109c:	4284      	cmp	r4, r0
 800109e:	d120      	bne.n	80010e2 <HAL_UART_Receive_IT+0x96>
 80010a0:	6919      	ldr	r1, [r3, #16]
 80010a2:	2900      	cmp	r1, #0
 80010a4:	d11b      	bne.n	80010de <HAL_UART_Receive_IT+0x92>
 80010a6:	4918      	ldr	r1, [pc, #96]	; (8001108 <HAL_UART_Receive_IT+0xbc>)
 80010a8:	8011      	strh	r1, [r2, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010aa:	2200      	movs	r2, #0
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010ac:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010ae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80010b0:	3222      	adds	r2, #34	; 0x22
 80010b2:	679a      	str	r2, [r3, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	6890      	ldr	r0, [r2, #8]
 80010b8:	4301      	orrs	r1, r0
 80010ba:	6091      	str	r1, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010bc:	2180      	movs	r1, #128	; 0x80
 80010be:	0149      	lsls	r1, r1, #5
 80010c0:	428c      	cmp	r4, r1
 80010c2:	d11e      	bne.n	8001102 <HAL_UART_Receive_IT+0xb6>
 80010c4:	6919      	ldr	r1, [r3, #16]
 80010c6:	2900      	cmp	r1, #0
 80010c8:	d11b      	bne.n	8001102 <HAL_UART_Receive_IT+0xb6>
      huart->RxISR = UART_RxISR_16BIT;
 80010ca:	4910      	ldr	r1, [pc, #64]	; (800110c <HAL_UART_Receive_IT+0xc0>)
      huart->RxISR = UART_RxISR_8BIT;
 80010cc:	6619      	str	r1, [r3, #96]	; 0x60
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80010ce:	2390      	movs	r3, #144	; 0x90
    __HAL_UNLOCK(huart);
 80010d0:	2000      	movs	r0, #0
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80010d2:	6811      	ldr	r1, [r2, #0]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	430b      	orrs	r3, r1
    __HAL_UNLOCK(huart);
 80010d8:	7028      	strb	r0, [r5, #0]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
    UART_MASK_COMPUTATION(huart);
 80010de:	21ff      	movs	r1, #255	; 0xff
 80010e0:	e7e2      	b.n	80010a8 <HAL_UART_Receive_IT+0x5c>
 80010e2:	2c00      	cmp	r4, #0
 80010e4:	d104      	bne.n	80010f0 <HAL_UART_Receive_IT+0xa4>
 80010e6:	6919      	ldr	r1, [r3, #16]
 80010e8:	2900      	cmp	r1, #0
 80010ea:	d0f8      	beq.n	80010de <HAL_UART_Receive_IT+0x92>
 80010ec:	217f      	movs	r1, #127	; 0x7f
 80010ee:	e7db      	b.n	80010a8 <HAL_UART_Receive_IT+0x5c>
 80010f0:	2080      	movs	r0, #128	; 0x80
 80010f2:	0540      	lsls	r0, r0, #21
 80010f4:	4284      	cmp	r4, r0
 80010f6:	d1d7      	bne.n	80010a8 <HAL_UART_Receive_IT+0x5c>
 80010f8:	6919      	ldr	r1, [r3, #16]
 80010fa:	2900      	cmp	r1, #0
 80010fc:	d0f6      	beq.n	80010ec <HAL_UART_Receive_IT+0xa0>
 80010fe:	213f      	movs	r1, #63	; 0x3f
 8001100:	e7d2      	b.n	80010a8 <HAL_UART_Receive_IT+0x5c>
      huart->RxISR = UART_RxISR_8BIT;
 8001102:	4903      	ldr	r1, [pc, #12]	; (8001110 <HAL_UART_Receive_IT+0xc4>)
 8001104:	e7e2      	b.n	80010cc <HAL_UART_Receive_IT+0x80>
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	000001ff 	.word	0x000001ff
 800110c:	08001179 	.word	0x08001179
 8001110:	08001119 	.word	0x08001119

08001114 <HAL_UART_TxCpltCallback>:
 8001114:	4770      	bx	lr
	...

08001118 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001118:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800111a:	b510      	push	{r4, lr}
 800111c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800111e:	2a22      	cmp	r2, #34	; 0x22
 8001120:	d123      	bne.n	800116a <UART_RxISR_8BIT+0x52>
  uint16_t uhMask = huart->Mask;
 8001122:	0002      	movs	r2, r0
 8001124:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	4013      	ands	r3, r2
 800112c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800112e:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8001130:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8001132:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001134:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8001136:	3301      	adds	r3, #1
 8001138:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800113a:	8813      	ldrh	r3, [r2, #0]
 800113c:	3b01      	subs	r3, #1
 800113e:	b29b      	uxth	r3, r3
 8001140:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8001142:	8813      	ldrh	r3, [r2, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <UART_RxISR_8BIT+0x50>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800114a:	6802      	ldr	r2, [r0, #0]
 800114c:	4c09      	ldr	r4, [pc, #36]	; (8001174 <UART_RxISR_8BIT+0x5c>)
 800114e:	6811      	ldr	r1, [r2, #0]
 8001150:	4021      	ands	r1, r4
 8001152:	6011      	str	r1, [r2, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001154:	6891      	ldr	r1, [r2, #8]
 8001156:	3423      	adds	r4, #35	; 0x23
 8001158:	34ff      	adds	r4, #255	; 0xff
 800115a:	43a1      	bics	r1, r4
 800115c:	6091      	str	r1, [r2, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800115e:	2220      	movs	r2, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8001160:	6603      	str	r3, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 8001162:	6782      	str	r2, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001164:	f000 fc12 	bl	800198c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8001168:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800116a:	2208      	movs	r2, #8
 800116c:	6999      	ldr	r1, [r3, #24]
 800116e:	430a      	orrs	r2, r1
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	e7f9      	b.n	8001168 <UART_RxISR_8BIT+0x50>
 8001174:	fffffedf 	.word	0xfffffedf

08001178 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001178:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 800117a:	b510      	push	{r4, lr}
 800117c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800117e:	2a22      	cmp	r2, #34	; 0x22
 8001180:	d121      	bne.n	80011c6 <UART_RxISR_16BIT+0x4e>
  uint16_t uhMask = huart->Mask;
 8001182:	0004      	movs	r4, r0
 8001184:	345c      	adds	r4, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001186:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 8001188:	8824      	ldrh	r4, [r4, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800118a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 800118c:	4021      	ands	r1, r4
 800118e:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8001190:	0001      	movs	r1, r0
    huart->pRxBuffPtr += 2U;
 8001192:	3202      	adds	r2, #2
 8001194:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001196:	315a      	adds	r1, #90	; 0x5a
 8001198:	880a      	ldrh	r2, [r1, #0]
 800119a:	3a01      	subs	r2, #1
 800119c:	b292      	uxth	r2, r2
 800119e:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 80011a0:	880a      	ldrh	r2, [r1, #0]
 80011a2:	b292      	uxth	r2, r2
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d10d      	bne.n	80011c4 <UART_RxISR_16BIT+0x4c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011a8:	6819      	ldr	r1, [r3, #0]
 80011aa:	4c09      	ldr	r4, [pc, #36]	; (80011d0 <UART_RxISR_16BIT+0x58>)
 80011ac:	4021      	ands	r1, r4
 80011ae:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011b0:	6899      	ldr	r1, [r3, #8]
 80011b2:	3423      	adds	r4, #35	; 0x23
 80011b4:	34ff      	adds	r4, #255	; 0xff
 80011b6:	43a1      	bics	r1, r4
 80011b8:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80011ba:	2320      	movs	r3, #32

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80011bc:	6602      	str	r2, [r0, #96]	; 0x60
      huart->RxState = HAL_UART_STATE_READY;
 80011be:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80011c0:	f000 fbe4 	bl	800198c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80011c4:	bd10      	pop	{r4, pc}
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80011c6:	2208      	movs	r2, #8
 80011c8:	6999      	ldr	r1, [r3, #24]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	619a      	str	r2, [r3, #24]
}
 80011ce:	e7f9      	b.n	80011c4 <UART_RxISR_16BIT+0x4c>
 80011d0:	fffffedf 	.word	0xfffffedf

080011d4 <HAL_UART_ErrorCallback>:
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_UART_IRQHandler>:
{
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80011da:	6803      	ldr	r3, [r0, #0]
{
 80011dc:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80011de:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011e0:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80011e2:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80011e4:	0711      	lsls	r1, r2, #28
 80011e6:	d10a      	bne.n	80011fe <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80011e8:	2120      	movs	r1, #32
 80011ea:	420a      	tst	r2, r1
 80011ec:	d100      	bne.n	80011f0 <HAL_UART_IRQHandler+0x18>
 80011ee:	e06a      	b.n	80012c6 <HAL_UART_IRQHandler+0xee>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80011f0:	4208      	tst	r0, r1
 80011f2:	d068      	beq.n	80012c6 <HAL_UART_IRQHandler+0xee>
      if (huart->RxISR != NULL)
 80011f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
      huart->TxISR(huart);
 80011f6:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d15a      	bne.n	80012b2 <HAL_UART_IRQHandler+0xda>
 80011fc:	e05a      	b.n	80012b4 <HAL_UART_IRQHandler+0xdc>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80011fe:	2101      	movs	r1, #1
 8001200:	0035      	movs	r5, r6
 8001202:	400d      	ands	r5, r1
 8001204:	d103      	bne.n	800120e <HAL_UART_IRQHandler+0x36>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001206:	2790      	movs	r7, #144	; 0x90
 8001208:	007f      	lsls	r7, r7, #1
 800120a:	4238      	tst	r0, r7
 800120c:	d05b      	beq.n	80012c6 <HAL_UART_IRQHandler+0xee>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800120e:	420a      	tst	r2, r1
 8001210:	d005      	beq.n	800121e <HAL_UART_IRQHandler+0x46>
 8001212:	05c6      	lsls	r6, r0, #23
 8001214:	d503      	bpl.n	800121e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001216:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001218:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800121a:	4331      	orrs	r1, r6
 800121c:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800121e:	2102      	movs	r1, #2
 8001220:	420a      	tst	r2, r1
 8001222:	d006      	beq.n	8001232 <HAL_UART_IRQHandler+0x5a>
 8001224:	2d00      	cmp	r5, #0
 8001226:	d004      	beq.n	8001232 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001228:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800122a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 800122c:	1849      	adds	r1, r1, r1
 800122e:	4331      	orrs	r1, r6
 8001230:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001232:	2104      	movs	r1, #4
 8001234:	420a      	tst	r2, r1
 8001236:	d006      	beq.n	8001246 <HAL_UART_IRQHandler+0x6e>
 8001238:	2d00      	cmp	r5, #0
 800123a:	d004      	beq.n	8001246 <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800123c:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800123e:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001240:	3902      	subs	r1, #2
 8001242:	4331      	orrs	r1, r6
 8001244:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001246:	0711      	lsls	r1, r2, #28
 8001248:	d508      	bpl.n	800125c <HAL_UART_IRQHandler+0x84>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800124a:	0681      	lsls	r1, r0, #26
 800124c:	d401      	bmi.n	8001252 <HAL_UART_IRQHandler+0x7a>
 800124e:	2d00      	cmp	r5, #0
 8001250:	d004      	beq.n	800125c <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001252:	2108      	movs	r1, #8
 8001254:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001256:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001258:	4319      	orrs	r1, r3
 800125a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800125c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800125e:	2b00      	cmp	r3, #0
 8001260:	d028      	beq.n	80012b4 <HAL_UART_IRQHandler+0xdc>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001262:	2320      	movs	r3, #32
 8001264:	421a      	tst	r2, r3
 8001266:	d006      	beq.n	8001276 <HAL_UART_IRQHandler+0x9e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001268:	4218      	tst	r0, r3
 800126a:	d004      	beq.n	8001276 <HAL_UART_IRQHandler+0x9e>
        if (huart->RxISR != NULL)
 800126c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_IRQHandler+0x9e>
          huart->RxISR(huart);
 8001272:	0020      	movs	r0, r4
 8001274:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001276:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8001278:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800127a:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 800127c:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800127e:	065b      	lsls	r3, r3, #25
 8001280:	d402      	bmi.n	8001288 <HAL_UART_IRQHandler+0xb0>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8001282:	2308      	movs	r3, #8
 8001284:	401d      	ands	r5, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001286:	d01a      	beq.n	80012be <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001288:	f7ff fece 	bl	8001028 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	420a      	tst	r2, r1
 8001294:	d00f      	beq.n	80012b6 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001296:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001298:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800129a:	438a      	bics	r2, r1
 800129c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800129e:	2800      	cmp	r0, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_UART_IRQHandler+0xde>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_UART_IRQHandler+0x134>)
 80012a4:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80012a6:	f7ff f967 	bl	8000578 <HAL_DMA_Abort_IT>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_UART_IRQHandler+0xdc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80012ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80012b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80012b2:	4798      	blx	r3
}
 80012b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 80012b6:	0020      	movs	r0, r4
 80012b8:	f7ff ff8c 	bl	80011d4 <HAL_UART_ErrorCallback>
 80012bc:	e7fa      	b.n	80012b4 <HAL_UART_IRQHandler+0xdc>
        HAL_UART_ErrorCallback(huart);
 80012be:	f7ff ff89 	bl	80011d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012c2:	67e5      	str	r5, [r4, #124]	; 0x7c
 80012c4:	e7f6      	b.n	80012b4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80012c6:	2180      	movs	r1, #128	; 0x80
 80012c8:	0349      	lsls	r1, r1, #13
 80012ca:	420a      	tst	r2, r1
 80012cc:	d006      	beq.n	80012dc <HAL_UART_IRQHandler+0x104>
 80012ce:	0275      	lsls	r5, r6, #9
 80012d0:	d504      	bpl.n	80012dc <HAL_UART_IRQHandler+0x104>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80012d2:	6219      	str	r1, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80012d4:	0020      	movs	r0, r4
 80012d6:	f000 faa7 	bl	8001828 <HAL_UARTEx_WakeupCallback>
    return;
 80012da:	e7eb      	b.n	80012b4 <HAL_UART_IRQHandler+0xdc>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	420a      	tst	r2, r1
 80012e0:	d003      	beq.n	80012ea <HAL_UART_IRQHandler+0x112>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80012e2:	4208      	tst	r0, r1
 80012e4:	d001      	beq.n	80012ea <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL)
 80012e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012e8:	e785      	b.n	80011f6 <HAL_UART_IRQHandler+0x1e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	420a      	tst	r2, r1
 80012ee:	d0e1      	beq.n	80012b4 <HAL_UART_IRQHandler+0xdc>
 80012f0:	4208      	tst	r0, r1
 80012f2:	d0df      	beq.n	80012b4 <HAL_UART_IRQHandler+0xdc>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80012f4:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 80012f6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80012f8:	438a      	bics	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80012fc:	2320      	movs	r3, #32
 80012fe:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8001300:	2300      	movs	r3, #0
 8001302:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001304:	f7ff ff06 	bl	8001114 <HAL_UART_TxCpltCallback>
 8001308:	e7d4      	b.n	80012b4 <HAL_UART_IRQHandler+0xdc>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	08001311 	.word	0x08001311

08001310 <UART_DMAAbortOnError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001310:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	0002      	movs	r2, r0
{
 8001316:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8001318:	325a      	adds	r2, #90	; 0x5a
 800131a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800131c:	3a08      	subs	r2, #8
 800131e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8001320:	f7ff ff58 	bl	80011d4 <HAL_UART_ErrorCallback>
}
 8001324:	bd10      	pop	{r4, pc}
	...

08001328 <UART_SetConfig>:
{
 8001328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800132c:	6925      	ldr	r5, [r4, #16]
 800132e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8001330:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001332:	432a      	orrs	r2, r5
 8001334:	6965      	ldr	r5, [r4, #20]
 8001336:	69c1      	ldr	r1, [r0, #28]
 8001338:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	4d79      	ldr	r5, [pc, #484]	; (8001524 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800133e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001340:	4028      	ands	r0, r5
 8001342:	4302      	orrs	r2, r0
 8001344:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4877      	ldr	r0, [pc, #476]	; (8001528 <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800134a:	4d78      	ldr	r5, [pc, #480]	; (800152c <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800134c:	4002      	ands	r2, r0
 800134e:	68e0      	ldr	r0, [r4, #12]
 8001350:	4302      	orrs	r2, r0
 8001352:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001354:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001356:	42ab      	cmp	r3, r5
 8001358:	d001      	beq.n	800135e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800135a:	6a22      	ldr	r2, [r4, #32]
 800135c:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	4e73      	ldr	r6, [pc, #460]	; (8001530 <UART_SetConfig+0x208>)
 8001362:	4032      	ands	r2, r6
 8001364:	4302      	orrs	r2, r0
 8001366:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001368:	4a72      	ldr	r2, [pc, #456]	; (8001534 <UART_SetConfig+0x20c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d113      	bne.n	8001396 <UART_SetConfig+0x6e>
 800136e:	2203      	movs	r2, #3
 8001370:	4b71      	ldr	r3, [pc, #452]	; (8001538 <UART_SetConfig+0x210>)
 8001372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001374:	4013      	ands	r3, r2
 8001376:	4a71      	ldr	r2, [pc, #452]	; (800153c <UART_SetConfig+0x214>)
 8001378:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800137a:	2380      	movs	r3, #128	; 0x80
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	4299      	cmp	r1, r3
 8001380:	d000      	beq.n	8001384 <UART_SetConfig+0x5c>
 8001382:	e092      	b.n	80014aa <UART_SetConfig+0x182>
    switch (clocksource)
 8001384:	2808      	cmp	r0, #8
 8001386:	d81e      	bhi.n	80013c6 <UART_SetConfig+0x9e>
 8001388:	f7fe fec8 	bl	800011c <__gnu_thumb1_case_uqi>
 800138c:	1d636058 	.word	0x1d636058
 8001390:	1d1d1d84 	.word	0x1d1d1d84
 8001394:	87          	.byte	0x87
 8001395:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001396:	4a6a      	ldr	r2, [pc, #424]	; (8001540 <UART_SetConfig+0x218>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d105      	bne.n	80013a8 <UART_SetConfig+0x80>
 800139c:	220c      	movs	r2, #12
 800139e:	4b66      	ldr	r3, [pc, #408]	; (8001538 <UART_SetConfig+0x210>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4013      	ands	r3, r2
 80013a4:	4a67      	ldr	r2, [pc, #412]	; (8001544 <UART_SetConfig+0x21c>)
 80013a6:	e7e7      	b.n	8001378 <UART_SetConfig+0x50>
 80013a8:	42ab      	cmp	r3, r5
 80013aa:	d000      	beq.n	80013ae <UART_SetConfig+0x86>
 80013ac:	e0b3      	b.n	8001516 <UART_SetConfig+0x1ee>
 80013ae:	21c0      	movs	r1, #192	; 0xc0
 80013b0:	2080      	movs	r0, #128	; 0x80
 80013b2:	4a61      	ldr	r2, [pc, #388]	; (8001538 <UART_SetConfig+0x210>)
 80013b4:	0109      	lsls	r1, r1, #4
 80013b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80013b8:	00c0      	lsls	r0, r0, #3
 80013ba:	400b      	ands	r3, r1
 80013bc:	4283      	cmp	r3, r0
 80013be:	d038      	beq.n	8001432 <UART_SetConfig+0x10a>
 80013c0:	d803      	bhi.n	80013ca <UART_SetConfig+0xa2>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <UART_SetConfig+0xb4>
        ret = HAL_ERROR;
 80013c6:	2501      	movs	r5, #1
 80013c8:	e00d      	b.n	80013e6 <UART_SetConfig+0xbe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ca:	2080      	movs	r0, #128	; 0x80
 80013cc:	0100      	lsls	r0, r0, #4
 80013ce:	4283      	cmp	r3, r0
 80013d0:	d00e      	beq.n	80013f0 <UART_SetConfig+0xc8>
 80013d2:	428b      	cmp	r3, r1
 80013d4:	d1f7      	bne.n	80013c6 <UART_SetConfig+0x9e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80013d6:	2080      	movs	r0, #128	; 0x80
 80013d8:	0200      	lsls	r0, r0, #8
 80013da:	e00d      	b.n	80013f8 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80013dc:	f7ff fd26 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
 80013e0:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 80013e2:	42a8      	cmp	r0, r5
 80013e4:	d108      	bne.n	80013f8 <UART_SetConfig+0xd0>
  huart->RxISR = NULL;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 80013ea:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80013ec:	6663      	str	r3, [r4, #100]	; 0x64
}
 80013ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80013f0:	6813      	ldr	r3, [r2, #0]
 80013f2:	06db      	lsls	r3, r3, #27
 80013f4:	d520      	bpl.n	8001438 <UART_SetConfig+0x110>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80013f6:	4854      	ldr	r0, [pc, #336]	; (8001548 <UART_SetConfig+0x220>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80013f8:	2203      	movs	r2, #3
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	435a      	muls	r2, r3
 80013fe:	4282      	cmp	r2, r0
 8001400:	d8e1      	bhi.n	80013c6 <UART_SetConfig+0x9e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001402:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001404:	4282      	cmp	r2, r0
 8001406:	d3de      	bcc.n	80013c6 <UART_SetConfig+0x9e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001408:	2700      	movs	r7, #0
 800140a:	0e02      	lsrs	r2, r0, #24
 800140c:	0201      	lsls	r1, r0, #8
 800140e:	085e      	lsrs	r6, r3, #1
 8001410:	1989      	adds	r1, r1, r6
 8001412:	417a      	adcs	r2, r7
 8001414:	0008      	movs	r0, r1
 8001416:	0011      	movs	r1, r2
 8001418:	001a      	movs	r2, r3
 800141a:	003b      	movs	r3, r7
 800141c:	f7fe ff14 	bl	8000248 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001420:	4b4a      	ldr	r3, [pc, #296]	; (800154c <UART_SetConfig+0x224>)
 8001422:	18c2      	adds	r2, r0, r3
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <UART_SetConfig+0x228>)
 8001426:	429a      	cmp	r2, r3
 8001428:	d8cd      	bhi.n	80013c6 <UART_SetConfig+0x9e>
          huart->Instance->BRR = usartdiv;
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	003d      	movs	r5, r7
 800142e:	60d8      	str	r0, [r3, #12]
 8001430:	e7d9      	b.n	80013e6 <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001432:	f7ff f983 	bl	800073c <HAL_RCC_GetSysClockFreq>
        break;
 8001436:	e7d3      	b.n	80013e0 <UART_SetConfig+0xb8>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8001438:	4846      	ldr	r0, [pc, #280]	; (8001554 <UART_SetConfig+0x22c>)
 800143a:	e7dd      	b.n	80013f8 <UART_SetConfig+0xd0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800143c:	f7ff fcf6 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	0040      	lsls	r0, r0, #1
 8001444:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001446:	18c0      	adds	r0, r0, r3
 8001448:	6861      	ldr	r1, [r4, #4]
 800144a:	e00b      	b.n	8001464 <UART_SetConfig+0x13c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800144c:	f7ff fcfe 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 8001450:	e7f6      	b.n	8001440 <UART_SetConfig+0x118>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001452:	2510      	movs	r5, #16
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <UART_SetConfig+0x210>)
 8001456:	6861      	ldr	r1, [r4, #4]
 8001458:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800145a:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800145c:	4015      	ands	r5, r2
 800145e:	d006      	beq.n	800146e <UART_SetConfig+0x146>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001460:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <UART_SetConfig+0x230>)
 8001462:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001464:	f7fe fe64 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001468:	2500      	movs	r5, #0
 800146a:	b283      	uxth	r3, r0
        break;
 800146c:	e004      	b.n	8001478 <UART_SetConfig+0x150>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <UART_SetConfig+0x234>)
 8001470:	18c0      	adds	r0, r0, r3
 8001472:	f7fe fe5d 	bl	8000130 <__udivsi3>
 8001476:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001478:	0019      	movs	r1, r3
 800147a:	4839      	ldr	r0, [pc, #228]	; (8001560 <UART_SetConfig+0x238>)
 800147c:	3910      	subs	r1, #16
 800147e:	4281      	cmp	r1, r0
 8001480:	d8a1      	bhi.n	80013c6 <UART_SetConfig+0x9e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001482:	210f      	movs	r1, #15
 8001484:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001486:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001488:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800148a:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 800148c:	6821      	ldr	r1, [r4, #0]
 800148e:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 8001490:	60cb      	str	r3, [r1, #12]
 8001492:	e7a8      	b.n	80013e6 <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001494:	f7ff f952 	bl	800073c <HAL_RCC_GetSysClockFreq>
 8001498:	e7d2      	b.n	8001440 <UART_SetConfig+0x118>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800149a:	6863      	ldr	r3, [r4, #4]
 800149c:	0858      	lsrs	r0, r3, #1
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	e7d0      	b.n	8001446 <UART_SetConfig+0x11e>
        ret = HAL_ERROR;
 80014a4:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e7e6      	b.n	8001478 <UART_SetConfig+0x150>
    switch (clocksource)
 80014aa:	2808      	cmp	r0, #8
 80014ac:	d837      	bhi.n	800151e <UART_SetConfig+0x1f6>
 80014ae:	f7fe fe35 	bl	800011c <__gnu_thumb1_case_uqi>
 80014b2:	0c05      	.short	0x0c05
 80014b4:	362a360f 	.word	0x362a360f
 80014b8:	3636      	.short	0x3636
 80014ba:	2d          	.byte	0x2d
 80014bb:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014bc:	f7ff fcb6 	bl	8000e2c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014c4:	18c0      	adds	r0, r0, r3
 80014c6:	6861      	ldr	r1, [r4, #4]
 80014c8:	e00b      	b.n	80014e2 <UART_SetConfig+0x1ba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014ca:	f7ff fcbf 	bl	8000e4c <HAL_RCC_GetPCLK2Freq>
 80014ce:	e7f7      	b.n	80014c0 <UART_SetConfig+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80014d0:	2510      	movs	r5, #16
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <UART_SetConfig+0x210>)
 80014d4:	6861      	ldr	r1, [r4, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80014d8:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80014da:	4015      	ands	r5, r2
 80014dc:	d00d      	beq.n	80014fa <UART_SetConfig+0x1d2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <UART_SetConfig+0x220>)
 80014e0:	18c0      	adds	r0, r0, r3
 80014e2:	f7fe fe25 	bl	8000130 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 80014e6:	2500      	movs	r5, #0
 80014e8:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80014ea:	0019      	movs	r1, r3
 80014ec:	481c      	ldr	r0, [pc, #112]	; (8001560 <UART_SetConfig+0x238>)
 80014ee:	3910      	subs	r1, #16
 80014f0:	4281      	cmp	r1, r0
 80014f2:	d900      	bls.n	80014f6 <UART_SetConfig+0x1ce>
 80014f4:	e767      	b.n	80013c6 <UART_SetConfig+0x9e>
      huart->Instance->BRR = usartdiv;
 80014f6:	6821      	ldr	r1, [r4, #0]
 80014f8:	e7ca      	b.n	8001490 <UART_SetConfig+0x168>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <UART_SetConfig+0x22c>)
 80014fc:	18c0      	adds	r0, r0, r3
 80014fe:	f7fe fe17 	bl	8000130 <__udivsi3>
 8001502:	b283      	uxth	r3, r0
 8001504:	e7f1      	b.n	80014ea <UART_SetConfig+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001506:	f7ff f919 	bl	800073c <HAL_RCC_GetSysClockFreq>
 800150a:	e7d9      	b.n	80014c0 <UART_SetConfig+0x198>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800150c:	6863      	ldr	r3, [r4, #4]
 800150e:	0858      	lsrs	r0, r3, #1
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	e7d6      	b.n	80014c4 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	021b      	lsls	r3, r3, #8
 800151a:	4299      	cmp	r1, r3
 800151c:	d0c2      	beq.n	80014a4 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 800151e:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001520:	2300      	movs	r3, #0
 8001522:	e7e2      	b.n	80014ea <UART_SetConfig+0x1c2>
 8001524:	efff69f3 	.word	0xefff69f3
 8001528:	ffffcfff 	.word	0xffffcfff
 800152c:	40004800 	.word	0x40004800
 8001530:	fffff4ff 	.word	0xfffff4ff
 8001534:	40013800 	.word	0x40013800
 8001538:	40021000 	.word	0x40021000
 800153c:	08001bf8 	.word	0x08001bf8
 8001540:	40004400 	.word	0x40004400
 8001544:	08001bfc 	.word	0x08001bfc
 8001548:	003d0900 	.word	0x003d0900
 800154c:	fffffd00 	.word	0xfffffd00
 8001550:	000ffcff 	.word	0x000ffcff
 8001554:	00f42400 	.word	0x00f42400
 8001558:	007a1200 	.word	0x007a1200
 800155c:	01e84800 	.word	0x01e84800
 8001560:	0000ffef 	.word	0x0000ffef

08001564 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001564:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001566:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001568:	07da      	lsls	r2, r3, #31
 800156a:	d506      	bpl.n	800157a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800156c:	6801      	ldr	r1, [r0, #0]
 800156e:	4c28      	ldr	r4, [pc, #160]	; (8001610 <UART_AdvFeatureConfig+0xac>)
 8001570:	684a      	ldr	r2, [r1, #4]
 8001572:	4022      	ands	r2, r4
 8001574:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001576:	4322      	orrs	r2, r4
 8001578:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800157a:	079a      	lsls	r2, r3, #30
 800157c:	d506      	bpl.n	800158c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800157e:	6801      	ldr	r1, [r0, #0]
 8001580:	4c24      	ldr	r4, [pc, #144]	; (8001614 <UART_AdvFeatureConfig+0xb0>)
 8001582:	684a      	ldr	r2, [r1, #4]
 8001584:	4022      	ands	r2, r4
 8001586:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001588:	4322      	orrs	r2, r4
 800158a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800158c:	075a      	lsls	r2, r3, #29
 800158e:	d506      	bpl.n	800159e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001590:	6801      	ldr	r1, [r0, #0]
 8001592:	4c21      	ldr	r4, [pc, #132]	; (8001618 <UART_AdvFeatureConfig+0xb4>)
 8001594:	684a      	ldr	r2, [r1, #4]
 8001596:	4022      	ands	r2, r4
 8001598:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800159a:	4322      	orrs	r2, r4
 800159c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800159e:	071a      	lsls	r2, r3, #28
 80015a0:	d506      	bpl.n	80015b0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80015a2:	6801      	ldr	r1, [r0, #0]
 80015a4:	4c1d      	ldr	r4, [pc, #116]	; (800161c <UART_AdvFeatureConfig+0xb8>)
 80015a6:	684a      	ldr	r2, [r1, #4]
 80015a8:	4022      	ands	r2, r4
 80015aa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80015ac:	4322      	orrs	r2, r4
 80015ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015b0:	06da      	lsls	r2, r3, #27
 80015b2:	d506      	bpl.n	80015c2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015b4:	6801      	ldr	r1, [r0, #0]
 80015b6:	4c1a      	ldr	r4, [pc, #104]	; (8001620 <UART_AdvFeatureConfig+0xbc>)
 80015b8:	688a      	ldr	r2, [r1, #8]
 80015ba:	4022      	ands	r2, r4
 80015bc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80015be:	4322      	orrs	r2, r4
 80015c0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80015c2:	069a      	lsls	r2, r3, #26
 80015c4:	d506      	bpl.n	80015d4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015c6:	6801      	ldr	r1, [r0, #0]
 80015c8:	4c16      	ldr	r4, [pc, #88]	; (8001624 <UART_AdvFeatureConfig+0xc0>)
 80015ca:	688a      	ldr	r2, [r1, #8]
 80015cc:	4022      	ands	r2, r4
 80015ce:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80015d0:	4322      	orrs	r2, r4
 80015d2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015d4:	065a      	lsls	r2, r3, #25
 80015d6:	d510      	bpl.n	80015fa <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015d8:	6801      	ldr	r1, [r0, #0]
 80015da:	4d13      	ldr	r5, [pc, #76]	; (8001628 <UART_AdvFeatureConfig+0xc4>)
 80015dc:	684a      	ldr	r2, [r1, #4]
 80015de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015e0:	402a      	ands	r2, r5
 80015e2:	4322      	orrs	r2, r4
 80015e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	0352      	lsls	r2, r2, #13
 80015ea:	4294      	cmp	r4, r2
 80015ec:	d105      	bne.n	80015fa <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015ee:	684a      	ldr	r2, [r1, #4]
 80015f0:	4c0e      	ldr	r4, [pc, #56]	; (800162c <UART_AdvFeatureConfig+0xc8>)
 80015f2:	4022      	ands	r2, r4
 80015f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80015f6:	4322      	orrs	r2, r4
 80015f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	d506      	bpl.n	800160c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015fe:	6802      	ldr	r2, [r0, #0]
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <UART_AdvFeatureConfig+0xcc>)
 8001602:	6853      	ldr	r3, [r2, #4]
 8001604:	400b      	ands	r3, r1
 8001606:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001608:	430b      	orrs	r3, r1
 800160a:	6053      	str	r3, [r2, #4]
}
 800160c:	bd30      	pop	{r4, r5, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	fffdffff 	.word	0xfffdffff
 8001614:	fffeffff 	.word	0xfffeffff
 8001618:	fffbffff 	.word	0xfffbffff
 800161c:	ffff7fff 	.word	0xffff7fff
 8001620:	ffffefff 	.word	0xffffefff
 8001624:	ffffdfff 	.word	0xffffdfff
 8001628:	ffefffff 	.word	0xffefffff
 800162c:	ff9fffff 	.word	0xff9fffff
 8001630:	fff7ffff 	.word	0xfff7ffff

08001634 <UART_WaitOnFlagUntilTimeout>:
{
 8001634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001636:	0004      	movs	r4, r0
 8001638:	000e      	movs	r6, r1
 800163a:	0015      	movs	r5, r2
 800163c:	001f      	movs	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800163e:	6822      	ldr	r2, [r4, #0]
 8001640:	69d3      	ldr	r3, [r2, #28]
 8001642:	4033      	ands	r3, r6
 8001644:	1b9b      	subs	r3, r3, r6
 8001646:	4259      	negs	r1, r3
 8001648:	414b      	adcs	r3, r1
 800164a:	42ab      	cmp	r3, r5
 800164c:	d001      	beq.n	8001652 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800164e:	2000      	movs	r0, #0
 8001650:	e01b      	b.n	800168a <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8001652:	9b06      	ldr	r3, [sp, #24]
 8001654:	3301      	adds	r3, #1
 8001656:	d0f3      	beq.n	8001640 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001658:	f7fe ff34 	bl	80004c4 <HAL_GetTick>
 800165c:	9b06      	ldr	r3, [sp, #24]
 800165e:	1bc0      	subs	r0, r0, r7
 8001660:	4283      	cmp	r3, r0
 8001662:	d301      	bcc.n	8001668 <UART_WaitOnFlagUntilTimeout+0x34>
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ea      	bne.n	800163e <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	4908      	ldr	r1, [pc, #32]	; (800168c <UART_WaitOnFlagUntilTimeout+0x58>)
 800166c:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800166e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	31a3      	adds	r1, #163	; 0xa3
 8001678:	31ff      	adds	r1, #255	; 0xff
 800167a:	438a      	bics	r2, r1
 800167c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800167e:	2320      	movs	r3, #32
 8001680:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001682:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001684:	2300      	movs	r3, #0
 8001686:	3470      	adds	r4, #112	; 0x70
 8001688:	7023      	strb	r3, [r4, #0]
}
 800168a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800168c:	fffffe5f 	.word	0xfffffe5f

08001690 <HAL_UART_Transmit>:
{
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	b087      	sub	sp, #28
 8001694:	9305      	str	r3, [sp, #20]
  if (huart->gState == HAL_UART_STATE_READY)
 8001696:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001698:	0004      	movs	r4, r0
 800169a:	000d      	movs	r5, r1
 800169c:	0017      	movs	r7, r2
    return HAL_BUSY;
 800169e:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d149      	bne.n	8001738 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 80016a4:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80016a6:	2900      	cmp	r1, #0
 80016a8:	d046      	beq.n	8001738 <HAL_UART_Transmit+0xa8>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d044      	beq.n	8001738 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	68a2      	ldr	r2, [r4, #8]
 80016b2:	015b      	lsls	r3, r3, #5
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d104      	bne.n	80016c2 <HAL_UART_Transmit+0x32>
 80016b8:	6923      	ldr	r3, [r4, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 80016be:	4201      	tst	r1, r0
 80016c0:	d13a      	bne.n	8001738 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80016c2:	0023      	movs	r3, r4
 80016c4:	3370      	adds	r3, #112	; 0x70
 80016c6:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80016c8:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80016ca:	2a01      	cmp	r2, #1
 80016cc:	d034      	beq.n	8001738 <HAL_UART_Transmit+0xa8>
 80016ce:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d0:	2600      	movs	r6, #0
    __HAL_LOCK(huart);
 80016d2:	701a      	strb	r2, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016d4:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d6:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016d8:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 80016da:	f7fe fef3 	bl	80004c4 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80016de:	0023      	movs	r3, r4
 80016e0:	3350      	adds	r3, #80	; 0x50
 80016e2:	801f      	strh	r7, [r3, #0]
    huart->TxXferCount = Size;
 80016e4:	3302      	adds	r3, #2
 80016e6:	9303      	str	r3, [sp, #12]
 80016e8:	801f      	strh	r7, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80016ee:	9004      	str	r0, [sp, #16]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d104      	bne.n	8001700 <HAL_UART_Transmit+0x70>
 80016f6:	6923      	ldr	r3, [r4, #16]
 80016f8:	42b3      	cmp	r3, r6
 80016fa:	d101      	bne.n	8001700 <HAL_UART_Transmit+0x70>
 80016fc:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80016fe:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8001700:	0023      	movs	r3, r4
 8001702:	3352      	adds	r3, #82	; 0x52
 8001704:	881a      	ldrh	r2, [r3, #0]
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001706:	9b05      	ldr	r3, [sp, #20]
    while (huart->TxXferCount > 0U)
 8001708:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	9b04      	ldr	r3, [sp, #16]
    while (huart->TxXferCount > 0U)
 800170e:	2a00      	cmp	r2, #0
 8001710:	d10a      	bne.n	8001728 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001712:	2140      	movs	r1, #64	; 0x40
 8001714:	0020      	movs	r0, r4
 8001716:	f7ff ff8d 	bl	8001634 <UART_WaitOnFlagUntilTimeout>
 800171a:	2800      	cmp	r0, #0
 800171c:	d10b      	bne.n	8001736 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_READY;
 800171e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001720:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8001722:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 8001724:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001726:	e007      	b.n	8001738 <HAL_UART_Transmit+0xa8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001728:	2200      	movs	r2, #0
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	0020      	movs	r0, r4
 800172e:	f7ff ff81 	bl	8001634 <UART_WaitOnFlagUntilTimeout>
 8001732:	2800      	cmp	r0, #0
 8001734:	d002      	beq.n	800173c <HAL_UART_Transmit+0xac>
        return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
}
 8001738:	b007      	add	sp, #28
 800173a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800173e:	2d00      	cmp	r5, #0
 8001740:	d10b      	bne.n	800175a <HAL_UART_Transmit+0xca>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001742:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8001744:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001746:	05db      	lsls	r3, r3, #23
 8001748:	0ddb      	lsrs	r3, r3, #23
 800174a:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800174c:	9b03      	ldr	r3, [sp, #12]
 800174e:	9a03      	ldr	r2, [sp, #12]
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	b29b      	uxth	r3, r3
 8001756:	8013      	strh	r3, [r2, #0]
 8001758:	e7d2      	b.n	8001700 <HAL_UART_Transmit+0x70>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800175a:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800175c:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800175e:	6293      	str	r3, [r2, #40]	; 0x28
 8001760:	e7f4      	b.n	800174c <HAL_UART_Transmit+0xbc>
	...

08001764 <UART_CheckIdleState>:
{
 8001764:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001766:	2600      	movs	r6, #0
{
 8001768:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800176a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800176c:	f7fe feaa 	bl	80004c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001770:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001772:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	071b      	lsls	r3, r3, #28
 8001778:	d415      	bmi.n	80017a6 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	075b      	lsls	r3, r3, #29
 8001780:	d50a      	bpl.n	8001798 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <UART_CheckIdleState+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	03c9      	lsls	r1, r1, #15
 800178c:	002b      	movs	r3, r5
 800178e:	0020      	movs	r0, r4
 8001790:	f7ff ff50 	bl	8001634 <UART_WaitOnFlagUntilTimeout>
 8001794:	2800      	cmp	r0, #0
 8001796:	d111      	bne.n	80017bc <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 8001798:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800179a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800179c:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800179e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80017a0:	3470      	adds	r4, #112	; 0x70
 80017a2:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80017a4:	e00b      	b.n	80017be <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80017a6:	2180      	movs	r1, #128	; 0x80
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <UART_CheckIdleState+0x5c>)
 80017aa:	0032      	movs	r2, r6
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	0389      	lsls	r1, r1, #14
 80017b0:	0003      	movs	r3, r0
 80017b2:	0020      	movs	r0, r4
 80017b4:	f7ff ff3e 	bl	8001634 <UART_WaitOnFlagUntilTimeout>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d0de      	beq.n	800177a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80017bc:	2003      	movs	r0, #3
}
 80017be:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80017c0:	01ffffff 	.word	0x01ffffff

080017c4 <HAL_UART_Init>:
{
 80017c4:	b510      	push	{r4, lr}
 80017c6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80017c8:	d101      	bne.n	80017ce <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
}
 80017cc:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80017ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 80017d4:	0002      	movs	r2, r0
 80017d6:	3270      	adds	r2, #112	; 0x70
 80017d8:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80017da:	f000 f92d 	bl	8001a38 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80017de:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80017e0:	2101      	movs	r1, #1
 80017e2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80017e4:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80017e6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017e8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80017ea:	438b      	bics	r3, r1
 80017ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80017ee:	f7ff fd9b 	bl	8001328 <UART_SetConfig>
 80017f2:	2801      	cmp	r0, #1
 80017f4:	d0e9      	beq.n	80017ca <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80017f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 80017fc:	0020      	movs	r0, r4
 80017fe:	f7ff feb1 	bl	8001564 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	4907      	ldr	r1, [pc, #28]	; (8001824 <HAL_UART_Init+0x60>)
 8001806:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001808:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800180c:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	438a      	bics	r2, r1
 8001814:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001816:	2201      	movs	r2, #1
 8001818:	6819      	ldr	r1, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800181e:	f7ff ffa1 	bl	8001764 <UART_CheckIdleState>
 8001822:	e7d3      	b.n	80017cc <HAL_UART_Init+0x8>
 8001824:	ffffb7ff 	.word	0xffffb7ff

08001828 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001828:	4770      	bx	lr
	...

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b530      	push	{r4, r5, lr}
 800182e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	2100      	movs	r1, #0
 8001834:	a80e      	add	r0, sp, #56	; 0x38
 8001836:	f000 f9ca 	bl	8001bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183a:	2214      	movs	r2, #20
 800183c:	2100      	movs	r1, #0
 800183e:	4668      	mov	r0, sp
 8001840:	f000 f9c5 	bl	8001bce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001844:	2224      	movs	r2, #36	; 0x24
 8001846:	2100      	movs	r1, #0
 8001848:	a805      	add	r0, sp, #20
 800184a:	f000 f9c0 	bl	8001bce <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800184e:	4916      	ldr	r1, [pc, #88]	; (80018a8 <SystemClock_Config+0x7c>)
 8001850:	4a16      	ldr	r2, [pc, #88]	; (80018ac <SystemClock_Config+0x80>)
 8001852:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001856:	401a      	ands	r2, r3
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001860:	2302      	movs	r3, #2
 8001862:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001864:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	02db      	lsls	r3, r3, #11
 800186a:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800186c:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186e:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001872:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001876:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001878:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800187c:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187e:	f7fe ff99 	bl	80007b4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001884:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001888:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	3b0c      	subs	r3, #12
 800188c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001890:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001894:	f7ff fa12 	bl	8000cbc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001898:	2304      	movs	r3, #4
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189a:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800189c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800189e:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	f7ff fae4 	bl	8000e6c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80018a4:	b01d      	add	sp, #116	; 0x74
 80018a6:	bd30      	pop	{r4, r5, pc}
 80018a8:	40007000 	.word	0x40007000
 80018ac:	ffffe7ff 	.word	0xffffe7ff

080018b0 <main>:
{
 80018b0:	b530      	push	{r4, r5, lr}
 80018b2:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80018b4:	f7fe fdea 	bl	800048c <HAL_Init>
  SystemClock_Config();
 80018b8:	f7ff ffb8 	bl	800182c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	2214      	movs	r2, #20
 80018be:	2100      	movs	r1, #0
 80018c0:	a803      	add	r0, sp, #12
 80018c2:	f000 f984 	bl	8001bce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	2002      	movs	r0, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <main+0xbc>)
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80018cc:	25a0      	movs	r5, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80018d0:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4311      	orrs	r1, r2
 80018d4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80018d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018d8:	4011      	ands	r1, r2
 80018da:	9101      	str	r1, [sp, #4]
 80018dc:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e0:	4301      	orrs	r1, r0
 80018e2:	62d9      	str	r1, [r3, #44]	; 0x2c
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018e6:	a903      	add	r1, sp, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4003      	ands	r3, r0
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018ea:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ec:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018ee:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80018f2:	9203      	str	r2, [sp, #12]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f7fe fe66 	bl	80005c4 <HAL_GPIO_Init>
  hlpuart1.Instance = LPUART1;
 80018f8:	4c1d      	ldr	r4, [pc, #116]	; (8001970 <main+0xc0>)
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <main+0xc4>)
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	220c      	movs	r2, #12
  hlpuart1.Instance = LPUART1;
 80018fe:	6023      	str	r3, [r4, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001900:	2396      	movs	r3, #150	; 0x96
 8001902:	019b      	lsls	r3, r3, #6
 8001904:	6063      	str	r3, [r4, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	2300      	movs	r3, #0
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001908:	0020      	movs	r0, r4
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	60a3      	str	r3, [r4, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800190c:	60e3      	str	r3, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800190e:	6123      	str	r3, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001910:	6162      	str	r2, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	61a3      	str	r3, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001914:	6223      	str	r3, [r4, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001918:	f7ff ff54 	bl	80017c4 <HAL_UART_Init>
  HAL_UART_Transmit(&hlpuart1, GPS_BAUDRATE, sizeof(GPS_BAUDRATE), 1000); //set baud rate
 800191c:	23fa      	movs	r3, #250	; 0xfa
 800191e:	2213      	movs	r2, #19
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4915      	ldr	r1, [pc, #84]	; (8001978 <main+0xc8>)
 8001924:	0020      	movs	r0, r4
 8001926:	f7ff feb3 	bl	8001690 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, GPS_FIXRATE, sizeof(GPS_FIXRATE), 1000); //set fix rate
 800192a:	23fa      	movs	r3, #250	; 0xfa
 800192c:	221b      	movs	r2, #27
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4912      	ldr	r1, [pc, #72]	; (800197c <main+0xcc>)
 8001932:	0020      	movs	r0, r4
 8001934:	f7ff feac 	bl	8001690 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, GPS_1HZ, sizeof(GPS_1HZ), 1000); //set frequency
 8001938:	23fa      	movs	r3, #250	; 0xfa
 800193a:	2213      	movs	r2, #19
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4910      	ldr	r1, [pc, #64]	; (8001980 <main+0xd0>)
 8001940:	0020      	movs	r0, r4
 8001942:	f7ff fea5 	bl	8001690 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, GPS_GGA, sizeof(GPS_GGA), 1000); //set sentence format
 8001946:	23fa      	movs	r3, #250	; 0xfa
 8001948:	2234      	movs	r2, #52	; 0x34
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	490d      	ldr	r1, [pc, #52]	; (8001984 <main+0xd4>)
 800194e:	0020      	movs	r0, r4
 8001950:	f7ff fe9e 	bl	8001690 <HAL_UART_Transmit>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8001954:	2101      	movs	r1, #1
 8001956:	0028      	movs	r0, r5
 8001958:	f7fe feea 	bl	8000730 <HAL_GPIO_ReadPin>
 800195c:	2800      	cmp	r0, #0
 800195e:	d0f9      	beq.n	8001954 <main+0xa4>
    	HAL_UART_Receive_IT(&hlpuart1, data, sizeof(data));
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	4909      	ldr	r1, [pc, #36]	; (8001988 <main+0xd8>)
 8001964:	0020      	movs	r0, r4
 8001966:	f7ff fb71 	bl	800104c <HAL_UART_Receive_IT>
 800196a:	e7f3      	b.n	8001954 <main+0xa4>
 800196c:	40021000 	.word	0x40021000
 8001970:	2000011c 	.word	0x2000011c
 8001974:	40004800 	.word	0x40004800
 8001978:	20000013 	.word	0x20000013
 800197c:	20000026 	.word	0x20000026
 8001980:	20000000 	.word	0x20000000
 8001984:	20000041 	.word	0x20000041
 8001988:	20000098 	.word	0x20000098

0800198c <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800198c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char string[7];
	int commaCnt = 0;
	int i = 0;
	int j = 0;

	memcpy(string, data, 6);
 800198e:	4c1b      	ldr	r4, [pc, #108]	; (80019fc <HAL_UART_RxCpltCallback+0x70>)
 8001990:	2206      	movs	r2, #6
 8001992:	0021      	movs	r1, r4
 8001994:	4668      	mov	r0, sp
 8001996:	f000 f911 	bl	8001bbc <memcpy>

	if(!strcmp(string, "$GPGGA"))
 800199a:	4919      	ldr	r1, [pc, #100]	; (8001a00 <HAL_UART_RxCpltCallback+0x74>)
 800199c:	4668      	mov	r0, sp
 800199e:	f7fe fbb3 	bl	8000108 <strcmp>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d10a      	bne.n	80019bc <HAL_UART_RxCpltCallback+0x30>
 80019a6:	0002      	movs	r2, r0
					latDir[j] = data[i];
					j++;
				}
				else if(commaCnt == 4) //longitude
				{
					longitude[j] = data[i];
 80019a8:	4e16      	ldr	r6, [pc, #88]	; (8001a04 <HAL_UART_RxCpltCallback+0x78>)
					latDir[j] = data[i];
 80019aa:	4f17      	ldr	r7, [pc, #92]	; (8001a08 <HAL_UART_RxCpltCallback+0x7c>)
 80019ac:	1da1      	adds	r1, r4, #6
		while(data[i] != '\n')
 80019ae:	780b      	ldrb	r3, [r1, #0]
 80019b0:	2b0a      	cmp	r3, #10
 80019b2:	d109      	bne.n	80019c8 <HAL_UART_RxCpltCallback+0x3c>
				}
			}
			i++; //increase element counter
		}

		if(fix[0] == 0) //no fix
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_UART_RxCpltCallback+0x80>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <HAL_UART_RxCpltCallback+0x3a>
		{
			HAL_UART_Receive_IT(&hlpuart1, data, sizeof(data)); //receive another message
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	0021      	movs	r1, r4
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <HAL_UART_RxCpltCallback+0x84>)
 80019c2:	f7ff fb43 	bl	800104c <HAL_UART_Receive_IT>
		HAL_UART_Receive_IT(&hlpuart1, data, sizeof(data));
	}

	//unpause interrupts

}
 80019c6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
			if (data[i] == ',')
 80019c8:	2b2c      	cmp	r3, #44	; 0x2c
 80019ca:	d103      	bne.n	80019d4 <HAL_UART_RxCpltCallback+0x48>
				j = 0; //reset counter for parsing
 80019cc:	2000      	movs	r0, #0
				commaCnt++; //increase number of commas found
 80019ce:	3201      	adds	r2, #1
 80019d0:	3101      	adds	r1, #1
 80019d2:	e7ec      	b.n	80019ae <HAL_UART_RxCpltCallback+0x22>
					latitude[j] = data[i];
 80019d4:	4d0f      	ldr	r5, [pc, #60]	; (8001a14 <HAL_UART_RxCpltCallback+0x88>)
				if(commaCnt == 2) //latitude
 80019d6:	2a02      	cmp	r2, #2
 80019d8:	d00e      	beq.n	80019f8 <HAL_UART_RxCpltCallback+0x6c>
				else if(commaCnt == 3) //latitude direction
 80019da:	2a03      	cmp	r2, #3
 80019dc:	d102      	bne.n	80019e4 <HAL_UART_RxCpltCallback+0x58>
					latDir[j] = data[i];
 80019de:	543b      	strb	r3, [r7, r0]
					j++;
 80019e0:	3001      	adds	r0, #1
 80019e2:	e7f5      	b.n	80019d0 <HAL_UART_RxCpltCallback+0x44>
				else if(commaCnt == 4) //longitude
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d101      	bne.n	80019ec <HAL_UART_RxCpltCallback+0x60>
					longitude[j] = data[i];
 80019e8:	5433      	strb	r3, [r6, r0]
 80019ea:	e7f9      	b.n	80019e0 <HAL_UART_RxCpltCallback+0x54>
					longDir[j] = data[i];
 80019ec:	4d0a      	ldr	r5, [pc, #40]	; (8001a18 <HAL_UART_RxCpltCallback+0x8c>)
				else if(commaCnt == 5) //longitude direction
 80019ee:	2a05      	cmp	r2, #5
 80019f0:	d002      	beq.n	80019f8 <HAL_UART_RxCpltCallback+0x6c>
				else if(commaCnt == 6)
 80019f2:	2a06      	cmp	r2, #6
 80019f4:	d1ec      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x44>
					fix[j] = data[i];
 80019f6:	4d05      	ldr	r5, [pc, #20]	; (8001a0c <HAL_UART_RxCpltCallback+0x80>)
 80019f8:	542b      	strb	r3, [r5, r0]
 80019fa:	e7f1      	b.n	80019e0 <HAL_UART_RxCpltCallback+0x54>
 80019fc:	20000098 	.word	0x20000098
 8001a00:	08001c09 	.word	0x08001c09
 8001a04:	2000021c 	.word	0x2000021c
 8001a08:	2000022c 	.word	0x2000022c
 8001a0c:	20000224 	.word	0x20000224
 8001a10:	2000011c 	.word	0x2000011c
 8001a14:	20000224 	.word	0x20000224
 8001a18:	2000022c 	.word	0x2000022c

08001a1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_MspInit+0x18>)
 8001a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a22:	430a      	orrs	r2, r1
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001a2a:	0552      	lsls	r2, r2, #21
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a30:	4770      	bx	lr
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	0004      	movs	r4, r0
 8001a3c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	2214      	movs	r2, #20
 8001a40:	2100      	movs	r1, #0
 8001a42:	a801      	add	r0, sp, #4
 8001a44:	f000 f8c3 	bl	8001bce <memset>
  if(huart->Instance==LPUART1)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_UART_MspInit+0x60>)
 8001a4a:	6822      	ldr	r2, [r4, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d121      	bne.n	8001a94 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	4b12      	ldr	r3, [pc, #72]	; (8001a9c <HAL_UART_MspInit+0x64>)
 8001a54:	02d2      	lsls	r2, r2, #11
 8001a56:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a58:	4811      	ldr	r0, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2202      	movs	r2, #2
 8001a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a62:	4311      	orrs	r1, r2
 8001a64:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a70:	23c0      	movs	r3, #192	; 0xc0
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8001a7a:	3301      	adds	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8001a7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f7fe fda0 	bl	80005c4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	201d      	movs	r0, #29
 8001a88:	0011      	movs	r1, r2
 8001a8a:	f7fe fd21 	bl	80004d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8001a8e:	201d      	movs	r0, #29
 8001a90:	f7fe fd4e 	bl	8000530 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001a94:	b006      	add	sp, #24
 8001a96:	bd10      	pop	{r4, pc}
 8001a98:	40004800 	.word	0x40004800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	50000400 	.word	0x50000400

08001aa4 <NMI_Handler>:
 8001aa4:	4770      	bx	lr

08001aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa6:	e7fe      	b.n	8001aa6 <HardFault_Handler>

08001aa8 <SVC_Handler>:
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f7fe fd01 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bd10      	pop	{r4, pc}

08001ab4 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8001ab4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <RNG_LPUART1_IRQHandler+0xc>)
 8001ab8:	f7ff fb8e 	bl	80011d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8001abc:	bd10      	pop	{r4, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	2000011c 	.word	0x2000011c

08001ac4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <SystemInit+0x44>)
 8001ac8:	0052      	lsls	r2, r2, #1
 8001aca:	6819      	ldr	r1, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <SystemInit+0x48>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	490d      	ldr	r1, [pc, #52]	; (8001b10 <SystemInit+0x4c>)
 8001adc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ade:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001ae0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <SystemInit+0x50>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	4909      	ldr	r1, [pc, #36]	; (8001b18 <SystemInit+0x54>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <SystemInit+0x58>)
 8001b00:	0512      	lsls	r2, r2, #20
 8001b02:	609a      	str	r2, [r3, #8]
#endif
}
 8001b04:	4770      	bx	lr
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	88ff400c 	.word	0x88ff400c
 8001b10:	fef6fff6 	.word	0xfef6fff6
 8001b14:	fffbffff 	.word	0xfffbffff
 8001b18:	ff02ffff 	.word	0xff02ffff
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001b20:	480d      	ldr	r0, [pc, #52]	; (8001b58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b26:	e003      	b.n	8001b30 <LoopCopyDataInit>

08001b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b2e:	3104      	adds	r1, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b38:	d3f6      	bcc.n	8001b28 <CopyDataInit>
  ldr  r2, =_sbss
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001b3c:	e002      	b.n	8001b44 <LoopFillZerobss>

08001b3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001b3e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001b40:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b42:	3204      	adds	r2, #4

08001b44 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <LoopForever+0x16>)
  cmp  r2, r3
 8001b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b48:	d3f9      	bcc.n	8001b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b4a:	f7ff ffbb 	bl	8001ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f000 f811 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7ff fead 	bl	80018b0 <main>

08001b56 <LoopForever>:

LoopForever:
    b LoopForever
 8001b56:	e7fe      	b.n	8001b56 <LoopForever>
  ldr   r0, =_estack
 8001b58:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001b5c:	08001c44 	.word	0x08001c44
  ldr  r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b64:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001b68:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001b6c:	2000022c 	.word	0x2000022c

08001b70 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC1_COMP_IRQHandler>
	...

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	2600      	movs	r6, #0
 8001b78:	4d0c      	ldr	r5, [pc, #48]	; (8001bac <__libc_init_array+0x38>)
 8001b7a:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7c:	1b64      	subs	r4, r4, r5
 8001b7e:	10a4      	asrs	r4, r4, #2
 8001b80:	42a6      	cmp	r6, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	2600      	movs	r6, #0
 8001b86:	f000 f82b 	bl	8001be0 <_init>
 8001b8a:	4d0a      	ldr	r5, [pc, #40]	; (8001bb4 <__libc_init_array+0x40>)
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	; (8001bb8 <__libc_init_array+0x44>)
 8001b8e:	1b64      	subs	r4, r4, r5
 8001b90:	10a4      	asrs	r4, r4, #2
 8001b92:	42a6      	cmp	r6, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	00b3      	lsls	r3, r6, #2
 8001b9a:	58eb      	ldr	r3, [r5, r3]
 8001b9c:	4798      	blx	r3
 8001b9e:	3601      	adds	r6, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	00b3      	lsls	r3, r6, #2
 8001ba4:	58eb      	ldr	r3, [r5, r3]
 8001ba6:	4798      	blx	r3
 8001ba8:	3601      	adds	r6, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08001c3c 	.word	0x08001c3c
 8001bb0:	08001c3c 	.word	0x08001c3c
 8001bb4:	08001c3c 	.word	0x08001c3c
 8001bb8:	08001c40 	.word	0x08001c40

08001bbc <memcpy>:
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	b510      	push	{r4, lr}
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d100      	bne.n	8001bc6 <memcpy+0xa>
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	5ccc      	ldrb	r4, [r1, r3]
 8001bc8:	54c4      	strb	r4, [r0, r3]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	e7f8      	b.n	8001bc0 <memcpy+0x4>

08001bce <memset>:
 8001bce:	0003      	movs	r3, r0
 8001bd0:	1882      	adds	r2, r0, r2
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d100      	bne.n	8001bd8 <memset+0xa>
 8001bd6:	4770      	bx	lr
 8001bd8:	7019      	strb	r1, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	e7f9      	b.n	8001bd2 <memset+0x4>
	...

08001be0 <_init>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr

08001bec <_fini>:
 8001bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf2:	bc08      	pop	{r3}
 8001bf4:	469e      	mov	lr, r3
 8001bf6:	4770      	bx	lr
